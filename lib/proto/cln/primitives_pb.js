// source: cln/primitives.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.cln.Amount', null, global);
goog.exportSymbol('proto.cln.AmountOrAll', null, global);
goog.exportSymbol('proto.cln.AmountOrAll.ValueCase', null, global);
goog.exportSymbol('proto.cln.AmountOrAny', null, global);
goog.exportSymbol('proto.cln.AmountOrAny.ValueCase', null, global);
goog.exportSymbol('proto.cln.ChannelSide', null, global);
goog.exportSymbol('proto.cln.ChannelState', null, global);
goog.exportSymbol('proto.cln.ChannelStateChangeCause', null, global);
goog.exportSymbol('proto.cln.Feerate', null, global);
goog.exportSymbol('proto.cln.Feerate.StyleCase', null, global);
goog.exportSymbol('proto.cln.HtlcState', null, global);
goog.exportSymbol('proto.cln.Outpoint', null, global);
goog.exportSymbol('proto.cln.OutputDesc', null, global);
goog.exportSymbol('proto.cln.RouteHop', null, global);
goog.exportSymbol('proto.cln.Routehint', null, global);
goog.exportSymbol('proto.cln.RoutehintList', null, global);
goog.exportSymbol('proto.cln.TlvEntry', null, global);
goog.exportSymbol('proto.cln.TlvStream', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cln.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.Amount.displayName = 'proto.cln.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.AmountOrAll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cln.AmountOrAll.oneofGroups_);
};
goog.inherits(proto.cln.AmountOrAll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.AmountOrAll.displayName = 'proto.cln.AmountOrAll';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.AmountOrAny = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cln.AmountOrAny.oneofGroups_);
};
goog.inherits(proto.cln.AmountOrAny, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.AmountOrAny.displayName = 'proto.cln.AmountOrAny';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.ChannelStateChangeCause = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cln.ChannelStateChangeCause, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.ChannelStateChangeCause.displayName = 'proto.cln.ChannelStateChangeCause';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.Outpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cln.Outpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.Outpoint.displayName = 'proto.cln.Outpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.Feerate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cln.Feerate.oneofGroups_);
};
goog.inherits(proto.cln.Feerate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.Feerate.displayName = 'proto.cln.Feerate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.OutputDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cln.OutputDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.OutputDesc.displayName = 'proto.cln.OutputDesc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.RouteHop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cln.RouteHop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.RouteHop.displayName = 'proto.cln.RouteHop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.Routehint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cln.Routehint.repeatedFields_, null);
};
goog.inherits(proto.cln.Routehint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.Routehint.displayName = 'proto.cln.Routehint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.RoutehintList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cln.RoutehintList.repeatedFields_, null);
};
goog.inherits(proto.cln.RoutehintList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.RoutehintList.displayName = 'proto.cln.RoutehintList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.TlvEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cln.TlvEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.TlvEntry.displayName = 'proto.cln.TlvEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cln.TlvStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cln.TlvStream.repeatedFields_, null);
};
goog.inherits(proto.cln.TlvStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cln.TlvStream.displayName = 'proto.cln.TlvStream';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    msat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.Amount}
 */
proto.cln.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.Amount;
  return proto.cln.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.Amount}
 */
proto.cln.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsat();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 msat = 1;
 * @return {number}
 */
proto.cln.Amount.prototype.getMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cln.Amount} returns this
 */
proto.cln.Amount.prototype.setMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cln.AmountOrAll.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cln.AmountOrAll.ValueCase = {
  VALUE_NOT_SET: 0,
  AMOUNT: 1,
  ALL: 2
};

/**
 * @return {proto.cln.AmountOrAll.ValueCase}
 */
proto.cln.AmountOrAll.prototype.getValueCase = function() {
  return /** @type {proto.cln.AmountOrAll.ValueCase} */(jspb.Message.computeOneofCase(this, proto.cln.AmountOrAll.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.AmountOrAll.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.AmountOrAll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.AmountOrAll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.AmountOrAll.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.cln.Amount.toObject(includeInstance, f),
    all: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.AmountOrAll}
 */
proto.cln.AmountOrAll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.AmountOrAll;
  return proto.cln.AmountOrAll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.AmountOrAll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.AmountOrAll}
 */
proto.cln.AmountOrAll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cln.Amount;
      reader.readMessage(value,proto.cln.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.AmountOrAll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.AmountOrAll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.AmountOrAll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.AmountOrAll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cln.Amount.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.cln.Amount}
 */
proto.cln.AmountOrAll.prototype.getAmount = function() {
  return /** @type{?proto.cln.Amount} */ (
    jspb.Message.getWrapperField(this, proto.cln.Amount, 1));
};


/**
 * @param {?proto.cln.Amount|undefined} value
 * @return {!proto.cln.AmountOrAll} returns this
*/
proto.cln.AmountOrAll.prototype.setAmount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cln.AmountOrAll.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cln.AmountOrAll} returns this
 */
proto.cln.AmountOrAll.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.AmountOrAll.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool all = 2;
 * @return {boolean}
 */
proto.cln.AmountOrAll.prototype.getAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cln.AmountOrAll} returns this
 */
proto.cln.AmountOrAll.prototype.setAll = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cln.AmountOrAll.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cln.AmountOrAll} returns this
 */
proto.cln.AmountOrAll.prototype.clearAll = function() {
  return jspb.Message.setOneofField(this, 2, proto.cln.AmountOrAll.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.AmountOrAll.prototype.hasAll = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cln.AmountOrAny.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cln.AmountOrAny.ValueCase = {
  VALUE_NOT_SET: 0,
  AMOUNT: 1,
  ANY: 2
};

/**
 * @return {proto.cln.AmountOrAny.ValueCase}
 */
proto.cln.AmountOrAny.prototype.getValueCase = function() {
  return /** @type {proto.cln.AmountOrAny.ValueCase} */(jspb.Message.computeOneofCase(this, proto.cln.AmountOrAny.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.AmountOrAny.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.AmountOrAny.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.AmountOrAny} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.AmountOrAny.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.cln.Amount.toObject(includeInstance, f),
    any: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.AmountOrAny}
 */
proto.cln.AmountOrAny.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.AmountOrAny;
  return proto.cln.AmountOrAny.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.AmountOrAny} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.AmountOrAny}
 */
proto.cln.AmountOrAny.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cln.Amount;
      reader.readMessage(value,proto.cln.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAny(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.AmountOrAny.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.AmountOrAny.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.AmountOrAny} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.AmountOrAny.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cln.Amount.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.cln.Amount}
 */
proto.cln.AmountOrAny.prototype.getAmount = function() {
  return /** @type{?proto.cln.Amount} */ (
    jspb.Message.getWrapperField(this, proto.cln.Amount, 1));
};


/**
 * @param {?proto.cln.Amount|undefined} value
 * @return {!proto.cln.AmountOrAny} returns this
*/
proto.cln.AmountOrAny.prototype.setAmount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cln.AmountOrAny.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cln.AmountOrAny} returns this
 */
proto.cln.AmountOrAny.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.AmountOrAny.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool any = 2;
 * @return {boolean}
 */
proto.cln.AmountOrAny.prototype.getAny = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cln.AmountOrAny} returns this
 */
proto.cln.AmountOrAny.prototype.setAny = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cln.AmountOrAny.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cln.AmountOrAny} returns this
 */
proto.cln.AmountOrAny.prototype.clearAny = function() {
  return jspb.Message.setOneofField(this, 2, proto.cln.AmountOrAny.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.AmountOrAny.prototype.hasAny = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.ChannelStateChangeCause.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.ChannelStateChangeCause.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.ChannelStateChangeCause} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.ChannelStateChangeCause.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.ChannelStateChangeCause}
 */
proto.cln.ChannelStateChangeCause.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.ChannelStateChangeCause;
  return proto.cln.ChannelStateChangeCause.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.ChannelStateChangeCause} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.ChannelStateChangeCause}
 */
proto.cln.ChannelStateChangeCause.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.ChannelStateChangeCause.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.ChannelStateChangeCause.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.ChannelStateChangeCause} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.ChannelStateChangeCause.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.Outpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.Outpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.Outpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Outpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: msg.getTxid_asB64(),
    outnum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.Outpoint}
 */
proto.cln.Outpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.Outpoint;
  return proto.cln.Outpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.Outpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.Outpoint}
 */
proto.cln.Outpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.Outpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.Outpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.Outpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Outpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOutnum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes txid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cln.Outpoint.prototype.getTxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txid = 1;
 * This is a type-conversion wrapper around `getTxid()`
 * @return {string}
 */
proto.cln.Outpoint.prototype.getTxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxid()));
};


/**
 * optional bytes txid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxid()`
 * @return {!Uint8Array}
 */
proto.cln.Outpoint.prototype.getTxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cln.Outpoint} returns this
 */
proto.cln.Outpoint.prototype.setTxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 outnum = 2;
 * @return {number}
 */
proto.cln.Outpoint.prototype.getOutnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cln.Outpoint} returns this
 */
proto.cln.Outpoint.prototype.setOutnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cln.Feerate.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.cln.Feerate.StyleCase = {
  STYLE_NOT_SET: 0,
  SLOW: 1,
  NORMAL: 2,
  URGENT: 3,
  PERKB: 4,
  PERKW: 5
};

/**
 * @return {proto.cln.Feerate.StyleCase}
 */
proto.cln.Feerate.prototype.getStyleCase = function() {
  return /** @type {proto.cln.Feerate.StyleCase} */(jspb.Message.computeOneofCase(this, proto.cln.Feerate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.Feerate.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.Feerate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.Feerate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Feerate.toObject = function(includeInstance, msg) {
  var f, obj = {
    slow: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    normal: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    urgent: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    perkb: jspb.Message.getFieldWithDefault(msg, 4, 0),
    perkw: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.Feerate}
 */
proto.cln.Feerate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.Feerate;
  return proto.cln.Feerate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.Feerate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.Feerate}
 */
proto.cln.Feerate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSlow(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNormal(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUrgent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPerkb(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPerkw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.Feerate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.Feerate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.Feerate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Feerate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional bool slow = 1;
 * @return {boolean}
 */
proto.cln.Feerate.prototype.getSlow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.setSlow = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.cln.Feerate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.clearSlow = function() {
  return jspb.Message.setOneofField(this, 1, proto.cln.Feerate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.Feerate.prototype.hasSlow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool normal = 2;
 * @return {boolean}
 */
proto.cln.Feerate.prototype.getNormal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.setNormal = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cln.Feerate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.clearNormal = function() {
  return jspb.Message.setOneofField(this, 2, proto.cln.Feerate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.Feerate.prototype.hasNormal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool urgent = 3;
 * @return {boolean}
 */
proto.cln.Feerate.prototype.getUrgent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.setUrgent = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.cln.Feerate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.clearUrgent = function() {
  return jspb.Message.setOneofField(this, 3, proto.cln.Feerate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.Feerate.prototype.hasUrgent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 perkb = 4;
 * @return {number}
 */
proto.cln.Feerate.prototype.getPerkb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.setPerkb = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.cln.Feerate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.clearPerkb = function() {
  return jspb.Message.setOneofField(this, 4, proto.cln.Feerate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.Feerate.prototype.hasPerkb = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 perkw = 5;
 * @return {number}
 */
proto.cln.Feerate.prototype.getPerkw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.setPerkw = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.cln.Feerate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cln.Feerate} returns this
 */
proto.cln.Feerate.prototype.clearPerkw = function() {
  return jspb.Message.setOneofField(this, 5, proto.cln.Feerate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.Feerate.prototype.hasPerkw = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.OutputDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.OutputDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.OutputDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.OutputDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: (f = msg.getAmount()) && proto.cln.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.OutputDesc}
 */
proto.cln.OutputDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.OutputDesc;
  return proto.cln.OutputDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.OutputDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.OutputDesc}
 */
proto.cln.OutputDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.cln.Amount;
      reader.readMessage(value,proto.cln.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.OutputDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.OutputDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.OutputDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.OutputDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cln.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.cln.OutputDesc.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cln.OutputDesc} returns this
 */
proto.cln.OutputDesc.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Amount amount = 2;
 * @return {?proto.cln.Amount}
 */
proto.cln.OutputDesc.prototype.getAmount = function() {
  return /** @type{?proto.cln.Amount} */ (
    jspb.Message.getWrapperField(this, proto.cln.Amount, 2));
};


/**
 * @param {?proto.cln.Amount|undefined} value
 * @return {!proto.cln.OutputDesc} returns this
*/
proto.cln.OutputDesc.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cln.OutputDesc} returns this
 */
proto.cln.OutputDesc.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.OutputDesc.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.RouteHop.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.RouteHop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.RouteHop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.RouteHop.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    shortChannelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    feebase: (f = msg.getFeebase()) && proto.cln.Amount.toObject(includeInstance, f),
    feeprop: jspb.Message.getFieldWithDefault(msg, 4, 0),
    expirydelta: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.RouteHop}
 */
proto.cln.RouteHop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.RouteHop;
  return proto.cln.RouteHop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.RouteHop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.RouteHop}
 */
proto.cln.RouteHop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortChannelId(value);
      break;
    case 3:
      var value = new proto.cln.Amount;
      reader.readMessage(value,proto.cln.Amount.deserializeBinaryFromReader);
      msg.setFeebase(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeeprop(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpirydelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.RouteHop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.RouteHop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.RouteHop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.RouteHop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getShortChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeebase();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cln.Amount.serializeBinaryToWriter
    );
  }
  f = message.getFeeprop();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getExpirydelta();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cln.RouteHop.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.cln.RouteHop.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.cln.RouteHop.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cln.RouteHop} returns this
 */
proto.cln.RouteHop.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string short_channel_id = 2;
 * @return {string}
 */
proto.cln.RouteHop.prototype.getShortChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cln.RouteHop} returns this
 */
proto.cln.RouteHop.prototype.setShortChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Amount feebase = 3;
 * @return {?proto.cln.Amount}
 */
proto.cln.RouteHop.prototype.getFeebase = function() {
  return /** @type{?proto.cln.Amount} */ (
    jspb.Message.getWrapperField(this, proto.cln.Amount, 3));
};


/**
 * @param {?proto.cln.Amount|undefined} value
 * @return {!proto.cln.RouteHop} returns this
*/
proto.cln.RouteHop.prototype.setFeebase = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cln.RouteHop} returns this
 */
proto.cln.RouteHop.prototype.clearFeebase = function() {
  return this.setFeebase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cln.RouteHop.prototype.hasFeebase = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 feeprop = 4;
 * @return {number}
 */
proto.cln.RouteHop.prototype.getFeeprop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cln.RouteHop} returns this
 */
proto.cln.RouteHop.prototype.setFeeprop = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 expirydelta = 5;
 * @return {number}
 */
proto.cln.RouteHop.prototype.getExpirydelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.cln.RouteHop} returns this
 */
proto.cln.RouteHop.prototype.setExpirydelta = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cln.Routehint.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.Routehint.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.Routehint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.Routehint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Routehint.toObject = function(includeInstance, msg) {
  var f, obj = {
    hopsList: jspb.Message.toObjectList(msg.getHopsList(),
    proto.cln.RouteHop.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.Routehint}
 */
proto.cln.Routehint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.Routehint;
  return proto.cln.Routehint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.Routehint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.Routehint}
 */
proto.cln.Routehint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cln.RouteHop;
      reader.readMessage(value,proto.cln.RouteHop.deserializeBinaryFromReader);
      msg.addHops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.Routehint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.Routehint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.Routehint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.Routehint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cln.RouteHop.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RouteHop hops = 1;
 * @return {!Array<!proto.cln.RouteHop>}
 */
proto.cln.Routehint.prototype.getHopsList = function() {
  return /** @type{!Array<!proto.cln.RouteHop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cln.RouteHop, 1));
};


/**
 * @param {!Array<!proto.cln.RouteHop>} value
 * @return {!proto.cln.Routehint} returns this
*/
proto.cln.Routehint.prototype.setHopsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cln.RouteHop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cln.RouteHop}
 */
proto.cln.Routehint.prototype.addHops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cln.RouteHop, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cln.Routehint} returns this
 */
proto.cln.Routehint.prototype.clearHopsList = function() {
  return this.setHopsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cln.RoutehintList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.RoutehintList.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.RoutehintList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.RoutehintList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.RoutehintList.toObject = function(includeInstance, msg) {
  var f, obj = {
    hintsList: jspb.Message.toObjectList(msg.getHintsList(),
    proto.cln.Routehint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.RoutehintList}
 */
proto.cln.RoutehintList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.RoutehintList;
  return proto.cln.RoutehintList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.RoutehintList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.RoutehintList}
 */
proto.cln.RoutehintList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.cln.Routehint;
      reader.readMessage(value,proto.cln.Routehint.deserializeBinaryFromReader);
      msg.addHints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.RoutehintList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.RoutehintList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.RoutehintList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.RoutehintList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cln.Routehint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Routehint hints = 2;
 * @return {!Array<!proto.cln.Routehint>}
 */
proto.cln.RoutehintList.prototype.getHintsList = function() {
  return /** @type{!Array<!proto.cln.Routehint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cln.Routehint, 2));
};


/**
 * @param {!Array<!proto.cln.Routehint>} value
 * @return {!proto.cln.RoutehintList} returns this
*/
proto.cln.RoutehintList.prototype.setHintsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cln.Routehint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cln.Routehint}
 */
proto.cln.RoutehintList.prototype.addHints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cln.Routehint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cln.RoutehintList} returns this
 */
proto.cln.RoutehintList.prototype.clearHintsList = function() {
  return this.setHintsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.TlvEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.TlvEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.TlvEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.TlvEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.TlvEntry}
 */
proto.cln.TlvEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.TlvEntry;
  return proto.cln.TlvEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.TlvEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.TlvEntry}
 */
proto.cln.TlvEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.TlvEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.TlvEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.TlvEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.TlvEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 type = 1;
 * @return {number}
 */
proto.cln.TlvEntry.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cln.TlvEntry} returns this
 */
proto.cln.TlvEntry.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cln.TlvEntry.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.cln.TlvEntry.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.cln.TlvEntry.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cln.TlvEntry} returns this
 */
proto.cln.TlvEntry.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cln.TlvStream.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cln.TlvStream.prototype.toObject = function(opt_includeInstance) {
  return proto.cln.TlvStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cln.TlvStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.TlvStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.cln.TlvEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cln.TlvStream}
 */
proto.cln.TlvStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cln.TlvStream;
  return proto.cln.TlvStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cln.TlvStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cln.TlvStream}
 */
proto.cln.TlvStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cln.TlvEntry;
      reader.readMessage(value,proto.cln.TlvEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cln.TlvStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cln.TlvStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cln.TlvStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cln.TlvStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cln.TlvEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TlvEntry entries = 1;
 * @return {!Array<!proto.cln.TlvEntry>}
 */
proto.cln.TlvStream.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.cln.TlvEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cln.TlvEntry, 1));
};


/**
 * @param {!Array<!proto.cln.TlvEntry>} value
 * @return {!proto.cln.TlvStream} returns this
*/
proto.cln.TlvStream.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cln.TlvEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cln.TlvEntry}
 */
proto.cln.TlvStream.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cln.TlvEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cln.TlvStream} returns this
 */
proto.cln.TlvStream.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


/**
 * @enum {number}
 */
proto.cln.ChannelSide = {
  LOCAL: 0,
  REMOTE: 1
};

/**
 * @enum {number}
 */
proto.cln.ChannelState = {
  OPENINGD: 0,
  CHANNELDAWAITINGLOCKIN: 1,
  CHANNELDNORMAL: 2,
  CHANNELDSHUTTINGDOWN: 3,
  CLOSINGDSIGEXCHANGE: 4,
  CLOSINGDCOMPLETE: 5,
  AWAITINGUNILATERAL: 6,
  FUNDINGSPENDSEEN: 7,
  ONCHAIN: 8,
  DUALOPENDOPENINIT: 9,
  DUALOPENDAWAITINGLOCKIN: 10,
  CHANNELDAWAITINGSPLICE: 11
};

/**
 * @enum {number}
 */
proto.cln.HtlcState = {
  SENTADDHTLC: 0,
  SENTADDCOMMIT: 1,
  RCVDADDREVOCATION: 2,
  RCVDADDACKCOMMIT: 3,
  SENTADDACKREVOCATION: 4,
  RCVDADDACKREVOCATION: 5,
  RCVDREMOVEHTLC: 6,
  RCVDREMOVECOMMIT: 7,
  SENTREMOVEREVOCATION: 8,
  SENTREMOVEACKCOMMIT: 9,
  RCVDREMOVEACKREVOCATION: 10,
  RCVDADDHTLC: 11,
  RCVDADDCOMMIT: 12,
  SENTADDREVOCATION: 13,
  SENTADDACKCOMMIT: 14,
  SENTREMOVEHTLC: 15,
  SENTREMOVECOMMIT: 16,
  RCVDREMOVEREVOCATION: 17,
  RCVDREMOVEACKCOMMIT: 18,
  SENTREMOVEACKREVOCATION: 19
};

goog.object.extend(exports, proto.cln);
