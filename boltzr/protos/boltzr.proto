syntax = "proto3";

package boltzr;

service BoltzR {
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

  rpc SetLogLevel (SetLogLevelRequest) returns (SetLogLevelResponse);

  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
  rpc GetMessages (GetMessagesRequest) returns (stream GetMessagesResponse);

  rpc SwapUpdate (stream SwapUpdateRequest) returns (stream SwapUpdateResponse);

  rpc StartWebHookRetries (StartWebHookRetriesRequest) returns (StartWebHookRetriesResponse);
  rpc CreateWebHook (CreateWebHookRequest) returns (CreateWebHookResponse);
  rpc SendWebHook (SendWebHookRequest) returns (SendWebHookResponse);

  rpc SignEvmRefund (SignEvmRefundRequest) returns (SignEvmRefundResponse);

  rpc DecodeInvoiceOrOffer (DecodeInvoiceOrOfferRequest) returns (DecodeInvoiceOrOfferResponse);
  rpc FetchInvoice (FetchInvoiceRequest) returns (FetchInvoiceResponse);

  rpc ScanMempool (ScanMempoolRequest) returns (ScanMempoolResponse);
}

message GetInfoRequest {}
message GetInfoResponse {
  string version = 1;
}

enum LogLevel {
  ERROR = 0;
  WARN = 1;
  INFO = 2;
  DEBUG = 3;
  TRACE = 4;
}

message SetLogLevelRequest {
  LogLevel level = 1;
}

message SetLogLevelResponse {}

message SendMessageRequest {
  string message = 1;
  optional bool is_important = 2;
  optional bool send_alert = 3;
}
message SendMessageResponse {}

message GetMessagesRequest {}
message GetMessagesResponse {
  string message = 1;
}

message SwapUpdate {
  message TransactionInfo {
    string id = 1;
    optional string hex = 2;
    optional uint64 eta = 3;
  }

  message FailureDetails {
    uint64 expected = 1;
    uint64 actual = 2;
  }

  message ChannelInfo {
    string funding_transaction_id = 1;
    uint64 funding_transaction_vout = 2;
  }

  string id = 1;
  string status = 2;

  optional bool zero_conf_rejected = 3;
  optional TransactionInfo transaction_info = 4;

  optional string failure_reason = 5;
  optional FailureDetails failure_details = 6;

  optional ChannelInfo channel_info = 7;
}

message SwapUpdateRequest {
  repeated SwapUpdate status = 1;
}

message SwapUpdateResponse {
  repeated string ids = 1;
}

message StartWebHookRetriesRequest {}
message StartWebHookRetriesResponse {}

message CreateWebHookRequest {
  string id = 1;
  string url = 2;
  bool hash_swap_id = 3;
  repeated string status = 4;
}
message CreateWebHookResponse {}

message SendWebHookRequest {
  string id = 1;
  string status = 3;
}

message SendWebHookResponse {
  bool ok = 1;
}

message SignEvmRefundRequest {
  bytes preimage_hash = 1;
  string amount = 2;
  // When populated, an ERC20 refund signature will be signed
  optional string token_address = 3;
  uint64 timeout = 4;

  oneof contract {
    string address = 5;
    uint64 version = 6;
  }
}

message SignEvmRefundResponse {
  bytes signature = 1;
}

message DecodeInvoiceOrOfferRequest {
  string invoice_or_offer = 1;
}

enum Feature {
  BASIC_MPP = 0;
}

message Bolt11Invoice {
  bytes payee_pubkey = 1;
  optional uint64 msat = 2;
  bytes payment_hash = 3;

  oneof description {
    string memo = 4;
    bytes description_hash = 5;
  }

  uint64 created_at = 6;
  uint64 expiry = 7;
  uint64 min_final_cltv_expiry = 8;

  message RoutingHints {
    message RoutingHint {
      bytes node = 1;
      uint64 channel_id = 2;

      uint32 base_fee_msat = 3;
      uint32 ppm_fee = 4;

      uint64 cltv_expiry_delta = 5;
      optional uint64 htlc_minimum_msat = 6;
      optional uint64 htlc_maximum_msat = 7;
    }

    repeated RoutingHint hops = 1;
  }

  repeated RoutingHints hints = 9;
  repeated Feature features = 10;
}

message Bolt12Offer {
  bytes id = 1;
  optional bytes signing_pubkey = 2;
  optional string description = 3;
  optional uint64 min_amount_msat = 4;
}

message Bolt12Invoice {
  bytes signing_pubkey = 1;
  optional uint64 msat = 2;
  bytes payment_hash = 3;
  optional string description = 4;
  uint64 created_at = 5;
  uint64 expiry = 6;

  message Path {
    optional bytes first_node_pubkey = 1;

    uint32 base_fee_msat = 2;
    uint32 ppm_fee = 3;

    uint64 cltv_expiry_delta = 4;
  }

  repeated Path paths = 7;
  repeated Feature features = 8;
}

message DecodeInvoiceOrOfferResponse {
  bool is_expired = 1;

  oneof decoded {
    Bolt11Invoice bolt11 = 2;
    Bolt12Offer offer = 3;
    Bolt12Invoice bolt12_invoice = 4;
  }
}

message FetchInvoiceRequest {
  string currency = 1;
  string offer = 2;
  uint64 amount_msat = 3;
}

message FetchInvoiceResponse {
  string invoice = 1;
}

message ScanMempoolRequest {
  repeated string symbols = 1;
}

message ScanMempoolResponse {
  message Transactions {
    repeated bytes raw = 1;
  }

  map<string, Transactions> transactions = 1;
}
