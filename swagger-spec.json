{
  "openapi": "3.0.0",
  "info": {
    "title": "Boltz API",
    "version": "3.5.0"
  },
  "paths": {
    "/chain/fees": {
      "get": {
        "description": "Fee estimations for all supported chains",
        "tags": [
          "Chain"
        ],
        "responses": {
          "200": {
            "description": "Object of currency of chain -> fee estimation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "number",
                    "description": "Fee estimation in sat/vbyte or GWEI"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chain/{currency}/fee": {
      "get": {
        "description": "Fee estimations for a chain",
        "tags": [
          "Chain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "currency",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Currency of the chain to get a fee estimation for"
          }
        ],
        "responses": {
          "200": {
            "description": "Object containing the fee estimation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fee": {
                      "type": "number",
                      "description": "Fee estimation in sat/vbyte or GWEI"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chain/{currency}/transaction/{id}": {
      "get": {
        "tags": [
          "Chain"
        ],
        "description": "Fetch a raw transaction by its id",
        "parameters": [
          {
            "in": "path",
            "name": "currency",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Currency of the chain to query for"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id of the transaction to query"
          }
        ],
        "responses": {
          "200": {
            "description": "Raw transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hex": {
                      "type": "string",
                      "description": "The transaction encoded as HEX"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error that caused the query for the transaction to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chain/{currency}/transaction": {
      "post": {
        "tags": [
          "Chain"
        ],
        "description": "Broadcast a transaction",
        "parameters": [
          {
            "in": "path",
            "name": "currency",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Currency of the chain to broadcast on"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hex": {
                    "type": "string",
                    "description": "The transaction to broadcast as raw HEX"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ID of the broadcast transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the broadcast transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error that caused the broadcast of the transaction to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "Version of the backend",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/infos": {
      "get": {
        "description": "Information about the configuration of the backend",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/warnings": {
      "get": {
        "description": "Warnings about the configuration of the backend",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes": {
      "get": {
        "description": "Information about the Lightning nodes the backend is connected to",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "Lightning node information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/NodeInfo"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/stats": {
      "get": {
        "description": "Statistics about the Lightning nodes the backend is connected to",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "Statistics about Lightning nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "total": {
                        "$ref": "#/components/schemas/NodeStats"
                      }
                    },
                    "additionalProperties": {
                      "$ref": "#/components/schemas/NodeStats"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/referral": {
      "get": {
        "description": "Referral ID for the used API keys",
        "tags": [
          "Referral"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "TS",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Current UNIX timestamp when the request is sent"
          },
          {
            "in": "header",
            "name": "API-KEY",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your API key"
          },
          {
            "in": "header",
            "name": "API-HMAC",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "HMAC-SHA256 with your API-Secret as key of the TS + HTTP method (all uppercase) + the HTTP path"
          }
        ],
        "responses": {
          "200": {
            "description": "The referral ID for your API-KEY to be used when creating Swaps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The referral ID for your API-KEY"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized in case of an unknown API-KEY or bad HMAC",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/referral/fees": {
      "get": {
        "description": "Referral fees collected for an ID",
        "tags": [
          "Referral"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "TS",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Current UNIX timestamp when the request is sent"
          },
          {
            "in": "header",
            "name": "API-KEY",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your API key"
          },
          {
            "in": "header",
            "name": "API-HMAC",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "HMAC-SHA256 with your API-Secret as key of the TS + HTTP method (all uppercase) + the HTTP path"
          }
        ],
        "responses": {
          "200": {
            "description": "The referral ID for your API-KEY to be used when creating Swaps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Year",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Month",
                    "additionalProperties": {
                      "type": "object",
                      "description": "Fees collected in that month",
                      "additionalProperties": {
                        "type": "string",
                        "description": "Fees collected in that currency in satoshis"
                      }
                    }
                  }
                },
                "examples": {
                  "json": {
                    "value": "{\"2024\":{\"1\":{\"BTC\":307}}}"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized in case of an unknown API-KEY or bad HMAC",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/referral/stats": {
      "get": {
        "description": "Statistics for Swaps created with an referral ID",
        "tags": [
          "Referral"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "TS",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Current UNIX timestamp when the request is sent"
          },
          {
            "in": "header",
            "name": "API-KEY",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your API key"
          },
          {
            "in": "header",
            "name": "API-HMAC",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "HMAC-SHA256 with your API-Secret as key of the TS + HTTP method (all uppercase) + the HTTP path"
          }
        ],
        "responses": {
          "200": {
            "description": "Swap statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Year",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Month",
                    "additionalProperties": {
                      "type": "object",
                      "description": "Swap statistics for that month",
                      "properties": {
                        "volume": {
                          "description": "Swap volume",
                          "properties": {
                            "total": {
                              "type": "string",
                              "description": "Volume across all pairs in BTC"
                            }
                          },
                          "additionalProperties": {
                            "type": "string",
                            "description": "Volume in that pair in BTC"
                          }
                        },
                        "trades": {
                          "type": "object",
                          "description": "Swap counts",
                          "properties": {
                            "total": {
                              "type": "integer",
                              "description": "Swap count across all pairs"
                            }
                          },
                          "additionalProperties": {
                            "type": "integer",
                            "description": "Swap count for that pair"
                          }
                        },
                        "failureRates": {
                          "type": "object",
                          "description": "Swap failure rates for each type",
                          "properties": {
                            "swaps": {
                              "type": "number",
                              "description": "Submarine Swap failure rate"
                            },
                            "reverseSwaps": {
                              "type": "number",
                              "description": "Reverse Swap failure rate"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "json": {
                    "value": "{\"2024\":{\"1\":{\"volume\":{\"total\":\"0.00321844\",\"L-BTC/BTC\":\"0.00321844\"},\"trades\":{\"total\":3,\"L-BTC/BTC\":3},\"failureRates\":{\"swaps\": 0.12, \"reverseSwaps\":0}}}}"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized in case of an unknown API-KEY or bad HMAC",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/submarine": {
      "get": {
        "description": "Possible pairs for Submarine Swaps",
        "tags": [
          "Submarine"
        ],
        "responses": {
          "200": {
            "description": "Dictionary of the from -> to currencies that can be used in a Submarine Swap",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/SubmarinePair"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new Submarine Swap from onchain to lightning",
        "tags": [
          "Submarine"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmarineRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created Submarine Swap",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmarineResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused the Submarine Swap creation to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/submarine/{id}/transaction": {
      "get": {
        "tags": [
          "Submarine"
        ],
        "description": "Get the lockup transaction of a Submarine Swap",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Submarine Swap"
          }
        ],
        "responses": {
          "200": {
            "description": "The lockup transaction of the Submarine Swap and accompanying information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmarineTransaction"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused the request to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/submarine/refund": {
      "post": {
        "description": "Requests a partial signature for a cooperative Submarine Swap refund transaction",
        "tags": [
          "Submarine"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmarineRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A partial signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialSignature"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused signature request to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/reverse": {
      "get": {
        "description": "Possible pairs for Reverse Swaps",
        "tags": [
          "Reverse"
        ],
        "responses": {
          "200": {
            "description": "Dictionary of the from -> to currencies that can be used in a Reverse Swap",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/ReversePair"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new Reverse Swap from lightning to onchain",
        "tags": [
          "Reverse"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReverseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created Reverse Swap",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused the Reverse Swap creation to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/reverse/claim": {
      "post": {
        "description": "Requests a partial signature for a cooperative Reverse Swap claim transaction",
        "tags": [
          "Reverse"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReverseClaimRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A partial signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialSignature"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused signature request to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/{id}": {
      "get": {
        "tags": [
          "Swap"
        ],
        "description": "Get the status of a Swap",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Swap"
          }
        ],
        "responses": {
          "200": {
            "description": "The latest status of the Swap",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapStatus"
                }
              }
            }
          },
          "404": {
            "description": "When no Swap with the ID could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NodeInfo": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string"
          },
          "uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NodeStats": {
        "type": "object",
        "properties": {
          "capacity": {
            "type": "integer"
          },
          "channels": {
            "type": "integer"
          },
          "peers": {
            "type": "integer"
          },
          "oldestChannel": {
            "type": "integer",
            "description": "UNIX timestamp of the block in which the funding transaction of the oldest channel was included"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "SwapTreeLeaf": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "description": "Tapscript version"
          },
          "output": {
            "type": "string",
            "description": "Script encoded as HEX"
          }
        }
      },
      "SwapTree": {
        "type": "object",
        "properties": {
          "claimLeaf": {
            "$ref": "#/components/schemas/SwapTreeLeaf"
          },
          "refundLeaf": {
            "$ref": "#/components/schemas/SwapTreeLeaf"
          }
        }
      },
      "SubmarinePair": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Hash of the pair that can be used when creating the Submarine Swap to ensure the information of the client is up-to-date"
          },
          "rate": {
            "type": "number",
            "description": "Exchange rate of the pair"
          },
          "limits": {
            "type": "object",
            "properties": {
              "minimal": {
                "type": "number",
                "description": "Minimal amount that can be swapped in satoshis"
              },
              "maximal": {
                "type": "number",
                "description": "Maximal amount that can be swapped in satoshis"
              },
              "maximalZeroConfAmount": {
                "type": "number",
                "description": "Maximal amount that will be accepted 0-conf in satoshis"
              }
            }
          },
          "fees": {
            "type": "object",
            "properties": {
              "percentage": {
                "type": "number",
                "description": "Relative fee that will be charged in percent"
              },
              "minerFees": {
                "type": "number",
                "description": "Absolute miner fee that will be charged in satoshis"
              }
            }
          }
        }
      },
      "SubmarineRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "required": true,
            "description": "The asset that is sent onchain"
          },
          "to": {
            "type": "string",
            "required": true,
            "description": "The asset that is received on lightning"
          },
          "invoice": {
            "type": "string",
            "required": true,
            "description": "BOLT11 invoice that should be paid on lightning"
          },
          "refundPublicKey": {
            "type": "string",
            "required": true,
            "description": "Public key with which the Submarine Swap can be refunded encoded as HEX"
          },
          "pairHash": {
            "type": "string"
          },
          "referralId": {
            "type": "string"
          }
        }
      },
      "SubmarineResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the created Submarine Swap"
          },
          "bip21": {
            "type": "string",
            "description": "BIP21 for the onchain payment request"
          },
          "address": {
            "type": "string",
            "description": "Onchain HTLC address"
          },
          "swapTree": {
            "$ref": "#/components/schemas/SwapTree"
          },
          "claimPublicKey": {
            "type": "string",
            "description": "Public key of Boltz that will be used to sweep the onchain HTLC"
          },
          "timeoutBlockHeight": {
            "type": "number",
            "description": "Timeout block height of the onchain HTLC"
          },
          "acceptZeroConf": {
            "type": "boolean",
            "description": "Whether 0-conf will be accepted assuming the transaction does not signal RBF and has a reasonably high fee"
          },
          "expectedAmount": {
            "type": "number",
            "description": "Amount that is expected to be sent to the onchain HTLC address in satoshis"
          },
          "blindingKey": {
            "type": "string",
            "description": "Liquid blinding private key encoded as HEX"
          }
        }
      },
      "SubmarineTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID the lockup transaction"
          },
          "hex": {
            "type": "string",
            "description": "Lockup transaction as raw HEX"
          },
          "timeoutBlockHeight": {
            "type": "number",
            "description": "Block height at which the time-lock expires"
          },
          "timeoutEta": {
            "type": "number",
            "description": "UNIX timestamp at which the time-lock expires; set if it has not expired already"
          }
        }
      },
      "SubmarineRefundRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "required": true,
            "description": "ID of the Submarine Swap that should be refunded"
          },
          "pubNonce": {
            "type": "string",
            "required": true,
            "description": "Public nonce of the client for the session encoded as HEX"
          },
          "transaction": {
            "type": "string",
            "required": true,
            "description": "Transaction which should be signed encoded as HEX"
          },
          "index": {
            "type": "number",
            "required": true,
            "description": "Index of the input of the transaction that should be signed"
          }
        }
      },
      "PartialSignature": {
        "type": "object",
        "properties": {
          "pubNonce": {
            "type": "string",
            "description": "Public nonce of Boltz encoded as HEX"
          },
          "partialSignature": {
            "type": "string",
            "description": "Partial signature encoded as HEX"
          }
        }
      },
      "ReversePair": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Hash of the pair that can be used when creating the Reverse Swap to ensure the information of the client is up-to-date"
          },
          "rate": {
            "type": "number",
            "description": "Exchange rate of the pair"
          },
          "limits": {
            "type": "object",
            "properties": {
              "minimal": {
                "type": "number",
                "description": "Minimal amount that can be swapped in satoshis"
              },
              "maximal": {
                "type": "number",
                "description": "Maximal amount that can be swapped in satoshis"
              }
            }
          },
          "fees": {
            "type": "object",
            "properties": {
              "percentage": {
                "type": "number",
                "description": "Relative fee that will be charged in percent"
              },
              "minerFees": {
                "type": "object",
                "properties": {
                  "lockup": {
                    "type": "number",
                    "description": "Absolute miner fee that will be charged in satoshis"
                  },
                  "claim": {
                    "type": "number",
                    "description": "Absolute miner fee that we estimate for the claim transaction in satoshis"
                  }
                }
              }
            }
          }
        }
      },
      "ReverseRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "required": true,
            "description": "The asset that is sent on lightning"
          },
          "to": {
            "type": "string",
            "required": true,
            "description": "The asset that is received onchain"
          },
          "preimageHash": {
            "type": "string",
            "required": true,
            "description": "SHA-256 hash of the preimage of the Reverse Swap encoded as HEX"
          },
          "claimPublicKey": {
            "type": "string",
            "required": true,
            "description": "Public key with which the Reverse Swap can be claimed encoded as HEX"
          },
          "invoiceAmount": {
            "type": "string",
            "description": "Amount for which the invoice should be; conflicts with \"onchainAmount\""
          },
          "onchainAmount": {
            "type": "string",
            "description": "Amount that should be locked in the onchain HTLC; conflicts with \"invoiceAmount\""
          },
          "pairHash": {
            "type": "string"
          },
          "referralId": {
            "type": "string"
          }
        }
      },
      "ReverseResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the created Reverse Swap"
          },
          "invoice": {
            "type": "string",
            "description": "Hold invoice of the Reverse Swap"
          },
          "swapTree": {
            "$ref": "#/components/schemas/SwapTree"
          },
          "lockupAddress": {
            "type": "string",
            "description": "HTLC address in which coins will be locked"
          },
          "refundPublicKey": {
            "type": "string",
            "description": "Public key of Boltz that will be used to refund the onchain HTLC"
          },
          "timeoutBlockHeight": {
            "type": "number",
            "description": "Timeout block height of the onchain HTLC"
          },
          "onchainAmount": {
            "type": "number",
            "description": "Amount that will be locked in the onchain HTLC"
          },
          "blindingKey": {
            "type": "string",
            "description": "Liquid blinding private key encoded as HEX"
          }
        }
      },
      "ReverseClaimRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "required": true,
            "description": "ID of the Reverse Swap that should be refunded"
          },
          "preimage": {
            "type": "string",
            "required": true,
            "description": "Preimage of the Reverse Swap encoded as HEX"
          },
          "pubNonce": {
            "type": "string",
            "required": true,
            "description": "Public nonce of the client for the session encoded as HEX"
          },
          "transaction": {
            "type": "string",
            "required": true,
            "description": "Transaction which should be signed encoded as HEX"
          },
          "index": {
            "type": "number",
            "required": true,
            "description": "Index of the input of the transaction that should be signed"
          }
        }
      },
      "SwapStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the Swap"
          },
          "zeroConfRejected": {
            "type": "boolean",
            "description": "Whether 0-conf was accepted for the lockup transaction of the Submarine Swap"
          },
          "transaction": {
            "type": "object",
            "description": "Details of the lockup transaction of a Reverse Swap",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the transaction"
              },
              "hex": {
                "type": "string",
                "description": "Raw hex of the transaction"
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Chain",
      "description": "Onchain data related endpoints"
    },
    {
      "name": "Info",
      "description": "General information"
    },
    {
      "name": "Nodes",
      "description": "Lightning nodes"
    },
    {
      "name": "Referral",
      "description": "Referral related endpoints"
    },
    {
      "name": "Submarine",
      "description": "Submarine Swap related endpoints"
    },
    {
      "name": "Reverse",
      "description": "Reverse Swap related endpoints"
    },
    {
      "name": "Swap",
      "description": "Generic Swap related endpoints"
    }
  ],
  "servers": [
    {
      "url": "https://api.boltz.exchange/v2",
      "description": "Mainnet"
    },
    {
      "url": "https://api.testnet.boltz.exchange/v2",
      "description": "Testnet"
    },
    {
      "url": "http://localhost:9001/v2",
      "description": "Regtest"
    }
  ]
}