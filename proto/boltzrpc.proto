syntax = "proto3";

package boltzrpc;

service Boltz {
  rpc Stop (StopRequest) returns (StopResponse);

  /* Gets general information about this Boltz instance and the nodes it is connected to */
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

  /* Gets the balance of all wallets */
  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse);

  /* Derives a keypair from the index of an HD wallet */
  rpc DeriveKeys (DeriveKeysRequest) returns (DeriveKeysResponse);

  rpc DeriveBlindingKeys (DeriveBlindingKeyRequest) returns (DeriveBlindingKeyResponse);
  rpc UnblindOutputs (UnblindOutputsRequest) returns (UnblindOutputsResponse);

  /* Gets an address of a specified wallet */
  rpc GetAddress (GetAddressRequest) returns (GetAddressResponse);

  /* Sends onchain coins to a specified address */
  rpc SendCoins (SendCoinsRequest) returns (SendCoinsResponse);

  /* Updates the timeout block delta of a pair */
  rpc UpdateTimeoutBlockDelta (UpdateTimeoutBlockDeltaRequest) returns (UpdateTimeoutBlockDeltaResponse);

  /* Adds a new referral ID to the database */
  rpc AddReferral (AddReferralRequest) returns (AddReferralResponse);

  /* Modifies the status of a swap */
  rpc SetSwapStatus (SetSwapStatusRequest) returns (SetSwapStatusResponse);

  /* Disables safety checks to allow for a cooperative refund for a swap */
  rpc AllowRefund (AllowRefundRequest) returns (AllowRefundResponse);

  /* Gets funds locked by the server for swaps */
  rpc GetLockedFunds (GetLockedFundsRequest) returns (GetLockedFundsResponse);

  /* Gets funds pending for sweep by the server */
  rpc GetPendingSweeps (GetPendingSweepsRequest) returns (GetPendingSweepsResponse);

  rpc SweepSwaps (SweepSwapsRequest) returns (SweepSwapsResponse);

  rpc ListSwaps (ListSwapsRequest) returns (ListSwapsResponse);

  rpc Rescan (RescanRequest) returns (RescanResponse);

  rpc GetLabel (GetLabelRequest) returns (GetLabelResponse);

  rpc GetPendingEvmTransactions (GetPendingEvmTransactionsRequest) returns (GetPendingEvmTransactionsResponse);

  rpc GetReferrals (GetReferralsRequest) returns (GetReferralsResponse);

  rpc SetReferral (SetReferralRequest) returns (SetReferralResponse);

  rpc CalculateTransactionFee (CalculateTransactionFeeRequest) returns (CalculateTransactionFeeResponse);

  rpc SwapCreationHook (stream SwapCreationResponse) returns (stream SwapCreation);

  rpc SetLogLevel (SetLogLevelRequest) returns (SetLogLevelResponse);

  rpc DevHeapDump (DevHeapDumpRequest) returns (DevHeapDumpResponse);
  rpc DevClearSwapUpdateCache (DevClearSwapUpdateCacheRequest) returns (DevClearSwapUpdateCacheResponse);
}

enum OutputType {
  BECH32 = 0;
  COMPATIBILITY = 1;
  LEGACY = 2;
}

message StopRequest {}
message StopResponse {}

message GetInfoRequest {}
message GetInfoResponse {
  string version = 1;
  map<string, CurrencyInfo> chains = 2;
}

message CurrencyInfo {
  ChainInfo chain = 1;
  map<string, LightningInfo> lightning = 2;
}

message ChainInfo {
  uint32 version = 1;
  uint64 blocks = 2;
  uint64 scanned_blocks = 3;
  uint64 connections = 4;

  string error = 5;
}

message LightningInfo {
  message Channels {
    uint32 active = 1;
    uint32 inactive = 2;
    uint32 pending = 3;
  }

  string version = 1;
  Channels channels = 2;
  uint64 block_height = 3;

  string error = 4;
}

message GetBalanceRequest {}
message GetBalanceResponse {
  map<string, Balances> balances = 1;
}

message Balances {
  message WalletBalance {
    uint64 confirmed = 1;
    uint64 unconfirmed = 2;
  }
  message LightningBalance {
    uint64 local = 1;
    uint64 remote = 2;
  }

  map<string, WalletBalance> wallets = 1;
  map<string, LightningBalance> lightning = 2;
}

message DeriveKeysRequest {
  string symbol = 1;
  uint32 index = 2;
}

message DeriveKeysResponse {
  string public_key = 1;
  string private_key = 2;
}

message DeriveBlindingKeyRequest {
  string address = 1;
}

message DeriveBlindingKeyResponse {
  string public_key = 1;
  string private_key = 2;
}

message UnblindOutputsRequest {
  oneof transaction {
    string id = 1;
    string hex = 2;
  };
}

message UnblindOutputsResponse {
  message UnblindedOutput {
    uint64 value = 1;
    bytes asset = 2;
    bool is_lbtc = 3;
    bytes script = 4;
    bytes nonce = 5;
    optional bytes range_proof = 6;
    optional bytes surjection_proof = 7;
  }

  repeated UnblindedOutput outputs = 1;
}

message GetAddressRequest {
  string symbol = 1;
  string label = 2;
}

message GetAddressResponse {
  string address = 1;
}

message SendCoinsRequest {
  string symbol = 1;
  string address = 2;
  uint64 amount = 3;

  // sat/vbyte for UTXO based chains or gas price in GWEI for account based ones
  uint32 fee = 4;
  bool send_all = 5;
  string label = 6;
}

message SendCoinsResponse {
  string transaction_id = 1;
  optional uint32 vout = 2;
}

message UpdateTimeoutBlockDeltaRequest {
  string pair = 1;

  uint32 reverse_timeout = 2;

  uint32 swap_minimal_timeout = 3;
  uint32 swap_maximal_timeout = 4;
  uint32 swap_taproot_timeout = 5;

  uint32 chain_timeout = 6;
}
message UpdateTimeoutBlockDeltaResponse {}

message AddReferralRequest {
  string id = 1;
  uint32 fee_share = 2;
  string routing_node = 3;
}
message AddReferralResponse {
  string api_key = 1;
  string api_secret = 2;
}

message SweepSwapsRequest {
  optional string symbol = 1;
}
message SweepSwapsResponse {
  message ClaimedSwaps {
    repeated string claimed_ids = 1;
  }

  map<string, ClaimedSwaps> claimed_symbols = 1;
}

message ListSwapsRequest {
  optional string status = 1;
  optional uint64 limit = 2;
}

message ListSwapsResponse {
  repeated string submarine_swaps = 1;
  repeated string reverse_swaps = 2;
  repeated string chain_swaps = 3;
}

message RescanRequest {
  string symbol = 1;
  uint64 start_height = 2;
  optional bool include_mempool = 3;
}
message RescanResponse {
  uint64 start_height = 1;
  uint64 end_height = 2;
}

message SetSwapStatusRequest {
  string id = 1;
  string status = 2;
}

message SetSwapStatusResponse {}

message AllowRefundRequest {
  string id = 1;
}

message AllowRefundResponse {}

message GetLabelRequest {
  string tx_id = 1;
}

message GetLabelResponse {
  string symbol = 1;
  string label = 2;
}

message GetPendingEvmTransactionsRequest {}

message GetPendingEvmTransactionsResponse {
  message Transaction {
    string symbol = 1;
    bytes hash = 2;
    bytes hex = 3;
    optional string label = 4;
    uint64 nonce = 5;
    // In wei
    string amount_sent = 6;
    // In wei
    optional string amount_received = 7;
  }

  repeated Transaction transactions = 1;
}

message GetReferralsRequest {
  // When not specified, all referrals are returned
  optional string id = 1;
}

message GetReferralsResponse {
  message Referral {
    string id = 1;
    optional string config = 2;
  }

  repeated Referral referral = 1;
}

message SetReferralRequest {
  string id = 1;
  optional string config = 2;
}

message SetReferralResponse {}

message DevHeapDumpRequest {
  optional string path = 1;
}

message DevHeapDumpResponse {}

message LockedFund {
  string swap_id = 1;
  uint64 onchain_amount = 2;
}

message LockedFunds {
  repeated LockedFund reverse_swaps = 1;
  repeated LockedFund chain_swaps = 2;
}

message GetLockedFundsRequest {}
message GetLockedFundsResponse {
  map<string, LockedFunds> locked_funds = 1;
}

message PendingSweep {
  string swap_id = 1;
  uint64 onchain_amount = 2;
  string type = 3;
}

enum LogLevel {
  ERROR = 0;
  WARN = 1;
  INFO = 2;
  VERBOSE = 3;
  DEBUG = 4;
  SILLY = 5;
}

message CalculateTransactionFeeRequest {
  string symbol = 1;
  string transaction_id = 2;
}

message CalculateTransactionFeeResponse {
  uint64 absolute = 1;
  oneof relative {
    double sat_per_vbyte = 2;
    double gwei = 3;
  }
}

message SwapCreationResponse {
  enum Action {
    ACCEPT = 0;
    REJECT = 1;
  }

  string id = 1;
  Action action = 2;
}

message SwapCreation {
    message Submarine {
    uint64 invoice_amount = 1;
  }

  message Reverse {
    uint64 invoice_amount = 1;
  }

  message Chain {
    uint64 user_lock_amount = 1;
  }

  string id = 1;
  string symbol_sending = 2;
  string symbol_receiving = 3;
  optional string referral = 4;

  oneof swap {
    Submarine submarine = 5;
    Reverse reverse = 6;
    Chain chain = 7;
  }
}

message SetLogLevelRequest {
  LogLevel level = 1;
}

message SetLogLevelResponse {}

message PendingSweeps {
  repeated PendingSweep pending_sweeps = 1;
}

message GetPendingSweepsRequest {}
message GetPendingSweepsResponse {
  map<string, PendingSweeps> pending_sweeps = 1;
}

message DevClearSwapUpdateCacheRequest {
  optional string id = 1;
}
message DevClearSwapUpdateCacheResponse {}
