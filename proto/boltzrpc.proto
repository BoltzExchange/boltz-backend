syntax = "proto3";

package boltzrpc;

service Boltz {
  /* Gets general information about this Boltz instance and the nodes it is connected to */
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

  /* Gets the balance for either all wallets or just a single one if specified */
  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse);

  /* Gets a new address of a specified wallet. The "type" parameter is optional and defaults to "OutputType.LEGACY" */
  rpc NewAddress (NewAddressRequest) returns (NewAddressResponse);

  /* Gets a hex encoded transaction from a transaction hash on the specified network */
  rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse);

  /* Broadcasts a hex encoded transaction on the specified network */
  rpc BroadcastTransaction (BroadcastTransactionRequest) returns (BroadcastTransactionResponse);

  /* Adds an entry to the list of addresses SubscribeTransactions listens to */
  rpc ListenOnAddress (ListenOnAddressRequest) returns (ListenOnAddressResponse);

  /* Subscribes to a stream of confirmed transactions to addresses that were specified with "ListenOnAddress" */
  rpc SubscribeTransactions (SubscribeTransactionsRequest) returns (stream SubscribeTransactionsResponse);

  /* Subscribes to a stream of invoices paid by Boltz */
  rpc SubscribeInvoices (SubscribeInvoicesRequest) returns (stream SubscribeInvoicesResponse);

  /* Creates a new Swap from the chain to Lightning */
  rpc CreateSwap (CreateSwapRequest) returns (CreateSwapResponse);

  /* Creates a new Swap from Lightning to the chain */
  rpc CreateReverseSwap (CreateReverseSwapRequest) returns (CreateReverseSwapResponse);
}

enum OutputType {
  BECH32 = 0;
  COMPATIBILITY = 1;
  LEGACY = 2;
}

enum OrderSide {
  BUY = 0;
  SELL = 1;
}

message GetInfoRequest {}
message GetInfoResponse {
  string version = 1;
  repeated CurrencyInfo chains = 2;
}

message CurrencyInfo {
  string symbol = 1;
  ChainInfo chain = 2;
  LndInfo lnd = 3;
}

message ChainInfo {
  int32 version = 1;
  int32 protocolversion = 2;
  int32 blocks = 3;
  int32 connections = 4;
  bool testnet = 5;
}

message LndInfo {
  string version = 1;
  LndChannels lndChannels = 2;
  int32 blockheight = 3;
  string error = 4;
}
message LndChannels {
  int32 active = 1;
  int32 inactive = 2;
  int32 pending = 3;
}

message GetBalanceRequest {
  string currency = 1;
}
message GetBalanceResponse {
  // A map between the currencies and its balances
  map<string, WalletBalance> balances = 1;
}

message WalletBalance {
  int64 total_balance = 1;
  int64 confirmed_balance = 2;
  int64 unconfirmed_balance = 3;
}

message NewAddressRequest {
  string currency = 1;
  OutputType type = 2;
}
message NewAddressResponse {
  string address = 1;
}

message GetTransactionRequest {
  string currency = 1;
  string transaction_hash = 2;
}
message GetTransactionResponse {
  string transaction_hex = 1;
}

message BroadcastTransactionRequest {
  string currency = 1;
  string transaction_hex = 2;
}
message BroadcastTransactionResponse {
  string transaction_hash = 1;
}

message ListenOnAddressRequest {
  string currency = 1;
  string address = 2;
}
message ListenOnAddressResponse {}

message SubscribeTransactionsRequest {}
message SubscribeTransactionsResponse {
  string transaction_hash = 1;
  string output_address = 2;
}

message SubscribeInvoicesRequest {}
message SubscribeInvoicesResponse {
  string invoice = 1;
}

message CreateSwapRequest {
  string base_currency = 1;
  string quote_currency = 2;
  OrderSide order_side = 3;
  float rate = 4;
  string invoice = 5;
  string refund_public_key = 6;
  OutputType output_type = 7;
}
message CreateSwapResponse {
  string redeem_script = 1;
  int64 timeout_block_height = 2;
  string address = 3;
  int64 expected_amount = 4;
  string bip21 = 5;
}

message CreateReverseSwapRequest {
  string base_currency = 1;
  string quote_currency = 2;
  OrderSide order_side = 3;
  float rate = 4;
  string claim_public_key = 5;
  // Amount of the invoice that will be returned
  int64 amount = 6;
}
message CreateReverseSwapResponse {
  string invoice = 1;
  string redeem_script = 2;
  string transaction = 3;
  string transaction_hash = 4;
}
