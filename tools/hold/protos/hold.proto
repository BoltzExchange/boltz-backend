syntax = "proto3";

package hold;

service Hold {
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {}

  rpc Invoice (InvoiceRequest) returns (InvoiceResponse) {}
  rpc RoutingHints (RoutingHintsRequest) returns (RoutingHintsResponse) {}
  rpc List (ListRequest) returns (ListResponse) {}

  rpc Settle (SettleRequest) returns (SettleResponse) {}
  rpc Cancel (CancelRequest) returns (CancelResponse) {}

  rpc Track (TrackRequest) returns (stream TrackResponse) {}
  rpc TrackAll (TrackAllRequest) returns (stream TrackAllResponse) {}

  // Workaround to expose the paystatus command via gRPC, since CLN doesn't
  rpc PayStatus (PayStatusRequest) returns (PayStatusResponse) {}
}

message GetInfoRequest {}
message GetInfoResponse {
  string version = 1;
}

message InvoiceRequest {
  string payment_hash = 1;
  uint64 amount_msat = 2;
  optional string description = 3;
  optional uint64 expiry = 4;
  optional uint64 min_final_cltv_expiry = 5;
  repeated RoutingHint routing_hints = 6;
}
message InvoiceResponse {
  string bolt11 = 1;
}

message RoutingHintsRequest {
  string node = 1;
}

message Hop {
  string public_key = 1;
  string short_channel_id = 2;
  uint64 base_fee = 3;
  uint64 ppm_fee = 4;
  uint64 cltv_expiry_delta = 5;
}

message RoutingHint {
  repeated Hop hops = 1;
}

message RoutingHintsResponse {
  repeated RoutingHint hints = 1;
}

message ListRequest {
  optional string payment_hash = 1;
}

enum InvoiceState {
  INVOICE_UNPAID = 0;
  INVOICE_ACCEPTED = 1;
  INVOICE_PAID = 2;
  INVOICE_CANCELLED = 3;
}

enum HtlcState {
  HTLC_ACCEPTED = 0;
  HTLC_SETTLED = 1;
  HTLC_CANCELLED = 2;
}

message Htlc {
  HtlcState state = 1;
  uint64 msat = 2;
  uint64 created_at = 3;
}

message Invoice {
  string payment_hash = 1;
  optional string payment_preimage = 2;
  InvoiceState state = 3;
  string bolt11 = 4;
  uint64 created_at = 5;
  repeated Htlc htlcs = 6;
}

message ListResponse {
  repeated Invoice invoices = 1;
}

message SettleRequest {
  string payment_preimage = 1;
}
message SettleResponse {}

message CancelRequest {
  string payment_hash = 1;
}
message CancelResponse {}

message TrackRequest {
  string payment_hash = 1;
}
message TrackResponse {
  InvoiceState state = 1;
}

message TrackAllRequest {}
message TrackAllResponse {
  string payment_hash = 1;
  string bolt11 = 2;
  InvoiceState state = 3;
}

message PayStatusRequest {
  optional string bolt11 = 1;
}

message PayStatusResponse {
  message PayStatus {
    message Attempt {
      enum AttemptState {
        ATTEMPT_PENDING = 0;
        ATTEMPT_COMPLETED = 1;
      }

      message Success {
        uint64 id = 1;
        string payment_preimage = 2;
      }

      message Failure {
        message Data {
          uint64 id = 1;
          string raw_message = 2;
          uint64 fail_code = 3;
          string fail_codename = 4;
          uint64 erring_index = 5;
          string erring_node = 6;
        }

        string message = 1;
        uint64 code = 2;
        optional Data data = 3;
      }

      string strategy = 1;
      uint64 start_time = 2;
      uint64 age_in_seconds = 3;
      optional uint64 end_time = 4;
      AttemptState state = 5;
      optional Success success = 6;
      optional Failure failure = 7;
    }

    string bolt11 = 1;
    uint64 amount_msat = 2;
    string destination = 3;
    repeated Attempt attempts = 4;
  }

  repeated PayStatus status = 1;
}
