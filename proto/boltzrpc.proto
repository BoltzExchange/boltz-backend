syntax = "proto3";

package boltzrpc;

service Boltz {
  /* Gets general information about this Boltz instance and the nodes it is connected to */
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

  /* Gets the balance of all wallets */
  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse);

  /* Derives a keypair from the index of an HD wallet */
  rpc DeriveKeys (DeriveKeysRequest) returns (DeriveKeysResponse);

  rpc DeriveBlindingKeys (DeriveBlindingKeyRequest) returns (DeriveBlindingKeyResponse);
  rpc UnblindOutputs (UnblindOutputsRequest) returns (UnblindOutputsResponse);

  /* Gets an address of a specified wallet */
  rpc GetAddress (GetAddressRequest) returns (GetAddressResponse);

  /* Sends onchain coins to a specified address */
  rpc SendCoins (SendCoinsRequest) returns (SendCoinsResponse);

  /* Updates the timeout block delta of a pair */
  rpc UpdateTimeoutBlockDelta (UpdateTimeoutBlockDeltaRequest) returns (UpdateTimeoutBlockDeltaResponse);

  /* Adds a new referral ID to the database */
  rpc AddReferral (AddReferralRequest) returns (AddReferralResponse);

  /* Modifies the status of a swap */
  rpc SetSwapStatus (SetSwapStatusRequest) returns (SetSwapStatusResponse);

  rpc SweepSwaps (SweepSwapsRequest) returns (SweepSwapsResponse);
  rpc Rescan (RescanRequest) returns (RescanResponse);
}

enum OutputType {
  BECH32 = 0;
  COMPATIBILITY = 1;
  LEGACY = 2;
}

message GetInfoRequest {}
message GetInfoResponse {
  string version = 1;
  map<string, CurrencyInfo> chains = 2;
}

message CurrencyInfo {
  ChainInfo chain = 1;
  map<string, LightningInfo> lightning = 2;
}

message ChainInfo {
  uint32 version = 1;
  uint64 blocks = 2;
  uint64 scanned_blocks = 3;
  uint64 connections = 4;

  string error = 5;
}

message LightningInfo {
  message Channels {
    uint32 active = 1;
    uint32 inactive = 2;
    uint32 pending = 3;
  }

  string version = 1;
  Channels channels = 2;
  uint64 block_height = 3;

  string error = 4;
}

message GetBalanceRequest {}
message GetBalanceResponse {
  map<string, Balances> balances = 1;
}

message Balances {
  message WalletBalance {
    uint64 confirmed = 1;
    uint64 unconfirmed = 2;
  }
  message LightningBalance {
    uint64 local = 1;
    uint64 remote = 2;
  }

  map<string, WalletBalance> wallets = 1;
  map<string, LightningBalance> lightning = 2;
}

message DeriveKeysRequest {
  string symbol = 1;
  uint32 index = 2;
}

message DeriveKeysResponse {
  string public_key = 1;
  string private_key = 2;
}

message DeriveBlindingKeyRequest {
  string address = 1;
}

message DeriveBlindingKeyResponse {
  string public_key = 1;
  string private_key = 2;
}

message UnblindOutputsRequest {
  oneof transaction {
    string id = 1;
    string hex = 2;
  };
}

message UnblindOutputsResponse {
  message UnblindedOutput {
    uint64 value = 1;
    bytes asset = 2;
    bool is_lbtc = 3;
    bytes script = 4;
    bytes nonce = 5;
    optional bytes range_proof = 6;
    optional bytes surjection_proof = 7;
  }

  repeated UnblindedOutput outputs = 1;
}

message GetAddressRequest {
  string symbol = 1;
}

message GetAddressResponse {
  string address = 1;
}

message SendCoinsRequest {
  string symbol = 1;
  string address = 2;
  uint64 amount = 3;

  // sat/vbyte for UTXO based chains or gas price in GWEI for account based ones
  uint32 fee = 4;
  bool send_all = 5;
}
message SendCoinsResponse {
  string transaction_id = 1;
  uint32 vout = 2;
}

message UpdateTimeoutBlockDeltaRequest {
  string pair = 1;

  uint32 reverse_timeout = 2;

  uint32 swap_minimal_timeout = 3;
  uint32 swap_maximal_timeout = 4;

  uint32 swap_taproot = 5;
}
message UpdateTimeoutBlockDeltaResponse {}

message AddReferralRequest {
  string id = 1;
  uint32 fee_share = 2;
  string routing_node = 3;
}
message AddReferralResponse {
  string api_key = 1;
  string api_secret = 2;
}

message SweepSwapsRequest {
  optional string symbol = 1;
}
message SweepSwapsResponse {
  message ClaimedSwaps {
    repeated string claimed_ids = 1;
  }

  map<string, ClaimedSwaps> claimed_symbols = 1;
}

message RescanRequest {
  string symbol = 1;
  uint64 start_height = 2;
}
message RescanResponse {
  uint64 start_height = 1;
  uint64 end_height = 2;
}

message SetSwapStatusRequest {
  string id = 1;
  string status = 2;
}

message SetSwapStatusResponse {}
