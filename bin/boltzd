#!/usr/bin/env node

const Boltz = require('../dist/Boltz').default;

const { argv } = require('yargs')
  .options({
    datadir: {
      describe: 'Data directory of Boltz',
      alias: 'w',
      type: 'string',
    },
    configpath: {
      type: 'string',
      describe: 'Path to the config file',
    },
    logpath: {
      describe: 'Path to the logfile',
      type: 'string',
    },
    loglevel: {
      describe: 'Verbosity of the logger',
      alias: 'l',
      type: 'string',
      choices: ['error', 'warn', 'info', 'verbose', 'debug', 'silly'],
    },
    walletpath: {
      type: 'string',
      describe: 'Path to the wallet file',
    },
    network: {
      describe: 'The network the lnd clients are using',
      type: 'string',
      choices: ['mainnet', 'testnet', 'simnet', 'regtest'],
    },
    'grpc.host': {
      describe: 'Host of the Boltz gRPC interface',
      type: 'string',
    },
    'grpc.port': {
      describe: 'Port of the Boltz gRPC interface',
      type: 'number',
    },
    'grpc.certpath': {
      describe: 'Path to the TLS certificate of the Boltz gRPC interface',
      type: 'string',
    },
    'grpc.keypath': {
      describe: 'Path to the key of the TLS certificate of the Boltz gRPC interface',
      type: 'string',
    },
    'btcd.configpath': {
      describe: 'Path to btcd config',
      type: 'string',
    },
    'btcd.lndport': {
      describe: 'Port for the gRPC interface',
      type: 'string',
    },
    'btcd.lndhost': {
      describe: 'Host for the gRPC interface',
      type: 'string',
    },
    'ltcd.configpath': {
      describe: 'Path to ltcd config',
      type: 'string',
    },
    'ltcd.lndport': {
      describe: 'Port for the gRPC interface',
      type: 'string',
    },
    'ltcd.lndhost': {
      describe: 'Host for the gRPC interface',
      type: 'string',
    },
    lndpath: {
      describe: 'Path to lnd',
      type: 'string',
    },
    currencies: {
      describe: 'Currencies that Boltz should support',
      type: 'array',
    },
  });

// Delete non-config keys from argv
delete argv._;
delete argv.version;
delete argv.help;
delete argv.$0;

const boltz = new Boltz(argv);
boltz.start();
