/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.boltzrpc.AbortDetails', null, global);
goog.exportSymbol('proto.boltzrpc.Balance', null, global);
goog.exportSymbol('proto.boltzrpc.BroadcastTransactionRequest', null, global);
goog.exportSymbol('proto.boltzrpc.BroadcastTransactionResponse', null, global);
goog.exportSymbol('proto.boltzrpc.ChainInfo', null, global);
goog.exportSymbol('proto.boltzrpc.ChannelBackup', null, global);
goog.exportSymbol('proto.boltzrpc.ChannelBalance', null, global);
goog.exportSymbol('proto.boltzrpc.ClaimDetails', null, global);
goog.exportSymbol('proto.boltzrpc.CreateReverseSwapRequest', null, global);
goog.exportSymbol('proto.boltzrpc.CreateReverseSwapResponse', null, global);
goog.exportSymbol('proto.boltzrpc.CreateSwapRequest', null, global);
goog.exportSymbol('proto.boltzrpc.CreateSwapResponse', null, global);
goog.exportSymbol('proto.boltzrpc.CurrencyInfo', null, global);
goog.exportSymbol('proto.boltzrpc.GetBalanceRequest', null, global);
goog.exportSymbol('proto.boltzrpc.GetBalanceResponse', null, global);
goog.exportSymbol('proto.boltzrpc.GetFeeEstimationRequest', null, global);
goog.exportSymbol('proto.boltzrpc.GetFeeEstimationResponse', null, global);
goog.exportSymbol('proto.boltzrpc.GetInfoRequest', null, global);
goog.exportSymbol('proto.boltzrpc.GetInfoResponse', null, global);
goog.exportSymbol('proto.boltzrpc.GetTransactionRequest', null, global);
goog.exportSymbol('proto.boltzrpc.GetTransactionResponse', null, global);
goog.exportSymbol('proto.boltzrpc.InvoiceEvent', null, global);
goog.exportSymbol('proto.boltzrpc.LightningBalance', null, global);
goog.exportSymbol('proto.boltzrpc.ListenOnAddressRequest', null, global);
goog.exportSymbol('proto.boltzrpc.ListenOnAddressResponse', null, global);
goog.exportSymbol('proto.boltzrpc.LndChannels', null, global);
goog.exportSymbol('proto.boltzrpc.LndInfo', null, global);
goog.exportSymbol('proto.boltzrpc.NewAddressRequest', null, global);
goog.exportSymbol('proto.boltzrpc.NewAddressResponse', null, global);
goog.exportSymbol('proto.boltzrpc.OrderSide', null, global);
goog.exportSymbol('proto.boltzrpc.OutputType', null, global);
goog.exportSymbol('proto.boltzrpc.RefundDetails', null, global);
goog.exportSymbol('proto.boltzrpc.SendCoinsRequest', null, global);
goog.exportSymbol('proto.boltzrpc.SendCoinsResponse', null, global);
goog.exportSymbol('proto.boltzrpc.SubscribeChannelBackupsRequest', null, global);
goog.exportSymbol('proto.boltzrpc.SubscribeInvoicesRequest', null, global);
goog.exportSymbol('proto.boltzrpc.SubscribeInvoicesResponse', null, global);
goog.exportSymbol('proto.boltzrpc.SubscribeSwapEventsRequest', null, global);
goog.exportSymbol('proto.boltzrpc.SubscribeSwapEventsResponse', null, global);
goog.exportSymbol('proto.boltzrpc.SubscribeTransactionsRequest', null, global);
goog.exportSymbol('proto.boltzrpc.SubscribeTransactionsResponse', null, global);
goog.exportSymbol('proto.boltzrpc.SwapEvent', null, global);
goog.exportSymbol('proto.boltzrpc.WalletBalance', null, global);
goog.exportSymbol('proto.boltzrpc.ZeroConfRejectedDetails', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetInfoRequest.displayName = 'proto.boltzrpc.GetInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetInfoRequest}
 */
proto.boltzrpc.GetInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetInfoRequest;
  return proto.boltzrpc.GetInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetInfoRequest}
 */
proto.boltzrpc.GetInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetInfoResponse.displayName = 'proto.boltzrpc.GetInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chainsMap: (f = msg.getChainsMap()) ? f.toObject(includeInstance, proto.boltzrpc.CurrencyInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetInfoResponse}
 */
proto.boltzrpc.GetInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetInfoResponse;
  return proto.boltzrpc.GetInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetInfoResponse}
 */
proto.boltzrpc.GetInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = msg.getChainsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.boltzrpc.CurrencyInfo.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChainsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.boltzrpc.CurrencyInfo.serializeBinaryToWriter);
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.boltzrpc.GetInfoResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.GetInfoResponse.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, CurrencyInfo> chains = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.boltzrpc.CurrencyInfo>}
 */
proto.boltzrpc.GetInfoResponse.prototype.getChainsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.boltzrpc.CurrencyInfo>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.boltzrpc.CurrencyInfo));
};


proto.boltzrpc.GetInfoResponse.prototype.clearChainsMap = function() {
  this.getChainsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.CurrencyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.CurrencyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.CurrencyInfo.displayName = 'proto.boltzrpc.CurrencyInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.CurrencyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.CurrencyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.CurrencyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CurrencyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    chain: (f = msg.getChain()) && proto.boltzrpc.ChainInfo.toObject(includeInstance, f),
    lnd: (f = msg.getLnd()) && proto.boltzrpc.LndInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.CurrencyInfo}
 */
proto.boltzrpc.CurrencyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.CurrencyInfo;
  return proto.boltzrpc.CurrencyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.CurrencyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.CurrencyInfo}
 */
proto.boltzrpc.CurrencyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.boltzrpc.ChainInfo;
      reader.readMessage(value,proto.boltzrpc.ChainInfo.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    case 2:
      var value = new proto.boltzrpc.LndInfo;
      reader.readMessage(value,proto.boltzrpc.LndInfo.deserializeBinaryFromReader);
      msg.setLnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.CurrencyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.CurrencyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.CurrencyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CurrencyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.boltzrpc.ChainInfo.serializeBinaryToWriter
    );
  }
  f = message.getLnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.boltzrpc.LndInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChainInfo chain = 1;
 * @return {?proto.boltzrpc.ChainInfo}
 */
proto.boltzrpc.CurrencyInfo.prototype.getChain = function() {
  return /** @type{?proto.boltzrpc.ChainInfo} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.ChainInfo, 1));
};


/** @param {?proto.boltzrpc.ChainInfo|undefined} value */
proto.boltzrpc.CurrencyInfo.prototype.setChain = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.boltzrpc.CurrencyInfo.prototype.clearChain = function() {
  this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.CurrencyInfo.prototype.hasChain = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LndInfo lnd = 2;
 * @return {?proto.boltzrpc.LndInfo}
 */
proto.boltzrpc.CurrencyInfo.prototype.getLnd = function() {
  return /** @type{?proto.boltzrpc.LndInfo} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.LndInfo, 2));
};


/** @param {?proto.boltzrpc.LndInfo|undefined} value */
proto.boltzrpc.CurrencyInfo.prototype.setLnd = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.boltzrpc.CurrencyInfo.prototype.clearLnd = function() {
  this.setLnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.CurrencyInfo.prototype.hasLnd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.ChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.ChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.ChainInfo.displayName = 'proto.boltzrpc.ChainInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.ChainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.ChainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.ChainInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ChainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    protocolversion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blocks: jspb.Message.getFieldWithDefault(msg, 3, 0),
    connections: jspb.Message.getFieldWithDefault(msg, 4, 0),
    error: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.ChainInfo}
 */
proto.boltzrpc.ChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.ChainInfo;
  return proto.boltzrpc.ChainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.ChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.ChainInfo}
 */
proto.boltzrpc.ChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProtocolversion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocks(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConnections(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.ChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.ChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.ChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getProtocolversion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBlocks();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getConnections();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.boltzrpc.ChainInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.boltzrpc.ChainInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 protocolversion = 2;
 * @return {number}
 */
proto.boltzrpc.ChainInfo.prototype.getProtocolversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.ChainInfo.prototype.setProtocolversion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 blocks = 3;
 * @return {number}
 */
proto.boltzrpc.ChainInfo.prototype.getBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.ChainInfo.prototype.setBlocks = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 connections = 4;
 * @return {number}
 */
proto.boltzrpc.ChainInfo.prototype.getConnections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.boltzrpc.ChainInfo.prototype.setConnections = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.boltzrpc.ChainInfo.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.boltzrpc.ChainInfo.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.LndInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.LndInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.LndInfo.displayName = 'proto.boltzrpc.LndInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.LndInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.LndInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.LndInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.LndInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lndChannels: (f = msg.getLndChannels()) && proto.boltzrpc.LndChannels.toObject(includeInstance, f),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    error: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.LndInfo}
 */
proto.boltzrpc.LndInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.LndInfo;
  return proto.boltzrpc.LndInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.LndInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.LndInfo}
 */
proto.boltzrpc.LndInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.boltzrpc.LndChannels;
      reader.readMessage(value,proto.boltzrpc.LndChannels.deserializeBinaryFromReader);
      msg.setLndChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.LndInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.LndInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.LndInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.LndInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLndChannels();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.boltzrpc.LndChannels.serializeBinaryToWriter
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.boltzrpc.LndInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.LndInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LndChannels lnd_channels = 2;
 * @return {?proto.boltzrpc.LndChannels}
 */
proto.boltzrpc.LndInfo.prototype.getLndChannels = function() {
  return /** @type{?proto.boltzrpc.LndChannels} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.LndChannels, 2));
};


/** @param {?proto.boltzrpc.LndChannels|undefined} value */
proto.boltzrpc.LndInfo.prototype.setLndChannels = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.boltzrpc.LndInfo.prototype.clearLndChannels = function() {
  this.setLndChannels(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.LndInfo.prototype.hasLndChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 block_height = 3;
 * @return {number}
 */
proto.boltzrpc.LndInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.LndInfo.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string error = 4;
 * @return {string}
 */
proto.boltzrpc.LndInfo.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.boltzrpc.LndInfo.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.LndChannels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.LndChannels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.LndChannels.displayName = 'proto.boltzrpc.LndChannels';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.LndChannels.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.LndChannels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.LndChannels} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.LndChannels.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inactive: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pending: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.LndChannels}
 */
proto.boltzrpc.LndChannels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.LndChannels;
  return proto.boltzrpc.LndChannels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.LndChannels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.LndChannels}
 */
proto.boltzrpc.LndChannels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInactive(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.LndChannels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.LndChannels.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.LndChannels} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.LndChannels.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInactive();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPending();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 active = 1;
 * @return {number}
 */
proto.boltzrpc.LndChannels.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.boltzrpc.LndChannels.prototype.setActive = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 inactive = 2;
 * @return {number}
 */
proto.boltzrpc.LndChannels.prototype.getInactive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.LndChannels.prototype.setInactive = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 pending = 3;
 * @return {number}
 */
proto.boltzrpc.LndChannels.prototype.getPending = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.LndChannels.prototype.setPending = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetBalanceRequest.displayName = 'proto.boltzrpc.GetBalanceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetBalanceRequest}
 */
proto.boltzrpc.GetBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetBalanceRequest;
  return proto.boltzrpc.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetBalanceRequest}
 */
proto.boltzrpc.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.GetBalanceRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.GetBalanceRequest.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetBalanceResponse.displayName = 'proto.boltzrpc.GetBalanceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancesMap: (f = msg.getBalancesMap()) ? f.toObject(includeInstance, proto.boltzrpc.Balance.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetBalanceResponse}
 */
proto.boltzrpc.GetBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetBalanceResponse;
  return proto.boltzrpc.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetBalanceResponse}
 */
proto.boltzrpc.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getBalancesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.boltzrpc.Balance.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalancesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.boltzrpc.Balance.serializeBinaryToWriter);
  }
};


/**
 * map<string, Balance> balances = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.boltzrpc.Balance>}
 */
proto.boltzrpc.GetBalanceResponse.prototype.getBalancesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.boltzrpc.Balance>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.boltzrpc.Balance));
};


proto.boltzrpc.GetBalanceResponse.prototype.clearBalancesMap = function() {
  this.getBalancesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.Balance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.Balance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.Balance.displayName = 'proto.boltzrpc.Balance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.Balance.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.Balance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.Balance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.Balance.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletBalance: (f = msg.getWalletBalance()) && proto.boltzrpc.WalletBalance.toObject(includeInstance, f),
    lightningBalance: (f = msg.getLightningBalance()) && proto.boltzrpc.LightningBalance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.Balance}
 */
proto.boltzrpc.Balance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.Balance;
  return proto.boltzrpc.Balance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.Balance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.Balance}
 */
proto.boltzrpc.Balance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.boltzrpc.WalletBalance;
      reader.readMessage(value,proto.boltzrpc.WalletBalance.deserializeBinaryFromReader);
      msg.setWalletBalance(value);
      break;
    case 2:
      var value = new proto.boltzrpc.LightningBalance;
      reader.readMessage(value,proto.boltzrpc.LightningBalance.deserializeBinaryFromReader);
      msg.setLightningBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.Balance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.Balance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.Balance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.Balance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.boltzrpc.WalletBalance.serializeBinaryToWriter
    );
  }
  f = message.getLightningBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.boltzrpc.LightningBalance.serializeBinaryToWriter
    );
  }
};


/**
 * optional WalletBalance wallet_balance = 1;
 * @return {?proto.boltzrpc.WalletBalance}
 */
proto.boltzrpc.Balance.prototype.getWalletBalance = function() {
  return /** @type{?proto.boltzrpc.WalletBalance} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.WalletBalance, 1));
};


/** @param {?proto.boltzrpc.WalletBalance|undefined} value */
proto.boltzrpc.Balance.prototype.setWalletBalance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.boltzrpc.Balance.prototype.clearWalletBalance = function() {
  this.setWalletBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.Balance.prototype.hasWalletBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LightningBalance lightning_balance = 2;
 * @return {?proto.boltzrpc.LightningBalance}
 */
proto.boltzrpc.Balance.prototype.getLightningBalance = function() {
  return /** @type{?proto.boltzrpc.LightningBalance} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.LightningBalance, 2));
};


/** @param {?proto.boltzrpc.LightningBalance|undefined} value */
proto.boltzrpc.Balance.prototype.setLightningBalance = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.boltzrpc.Balance.prototype.clearLightningBalance = function() {
  this.setLightningBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.Balance.prototype.hasLightningBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.LightningBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.LightningBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.LightningBalance.displayName = 'proto.boltzrpc.LightningBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.LightningBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.LightningBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.LightningBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.LightningBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletBalance: (f = msg.getWalletBalance()) && proto.boltzrpc.WalletBalance.toObject(includeInstance, f),
    channelBalance: (f = msg.getChannelBalance()) && proto.boltzrpc.ChannelBalance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.LightningBalance}
 */
proto.boltzrpc.LightningBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.LightningBalance;
  return proto.boltzrpc.LightningBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.LightningBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.LightningBalance}
 */
proto.boltzrpc.LightningBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.boltzrpc.WalletBalance;
      reader.readMessage(value,proto.boltzrpc.WalletBalance.deserializeBinaryFromReader);
      msg.setWalletBalance(value);
      break;
    case 2:
      var value = new proto.boltzrpc.ChannelBalance;
      reader.readMessage(value,proto.boltzrpc.ChannelBalance.deserializeBinaryFromReader);
      msg.setChannelBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.LightningBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.LightningBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.LightningBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.LightningBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.boltzrpc.WalletBalance.serializeBinaryToWriter
    );
  }
  f = message.getChannelBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.boltzrpc.ChannelBalance.serializeBinaryToWriter
    );
  }
};


/**
 * optional WalletBalance wallet_balance = 1;
 * @return {?proto.boltzrpc.WalletBalance}
 */
proto.boltzrpc.LightningBalance.prototype.getWalletBalance = function() {
  return /** @type{?proto.boltzrpc.WalletBalance} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.WalletBalance, 1));
};


/** @param {?proto.boltzrpc.WalletBalance|undefined} value */
proto.boltzrpc.LightningBalance.prototype.setWalletBalance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.boltzrpc.LightningBalance.prototype.clearWalletBalance = function() {
  this.setWalletBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.LightningBalance.prototype.hasWalletBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelBalance channel_balance = 2;
 * @return {?proto.boltzrpc.ChannelBalance}
 */
proto.boltzrpc.LightningBalance.prototype.getChannelBalance = function() {
  return /** @type{?proto.boltzrpc.ChannelBalance} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.ChannelBalance, 2));
};


/** @param {?proto.boltzrpc.ChannelBalance|undefined} value */
proto.boltzrpc.LightningBalance.prototype.setChannelBalance = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.boltzrpc.LightningBalance.prototype.clearChannelBalance = function() {
  this.setChannelBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.LightningBalance.prototype.hasChannelBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.WalletBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.WalletBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.WalletBalance.displayName = 'proto.boltzrpc.WalletBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.WalletBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.WalletBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.WalletBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.WalletBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalBalance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confirmedBalance: jspb.Message.getFieldWithDefault(msg, 2, 0),
    unconfirmedBalance: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.WalletBalance}
 */
proto.boltzrpc.WalletBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.WalletBalance;
  return proto.boltzrpc.WalletBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.WalletBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.WalletBalance}
 */
proto.boltzrpc.WalletBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmedBalance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnconfirmedBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.WalletBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.WalletBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.WalletBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.WalletBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalBalance();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getConfirmedBalance();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUnconfirmedBalance();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 total_balance = 1;
 * @return {number}
 */
proto.boltzrpc.WalletBalance.prototype.getTotalBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.boltzrpc.WalletBalance.prototype.setTotalBalance = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 confirmed_balance = 2;
 * @return {number}
 */
proto.boltzrpc.WalletBalance.prototype.getConfirmedBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.WalletBalance.prototype.setConfirmedBalance = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 unconfirmed_balance = 3;
 * @return {number}
 */
proto.boltzrpc.WalletBalance.prototype.getUnconfirmedBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.WalletBalance.prototype.setUnconfirmedBalance = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.ChannelBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.ChannelBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.ChannelBalance.displayName = 'proto.boltzrpc.ChannelBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.ChannelBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.ChannelBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.ChannelBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ChannelBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    localBalance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    remoteBalance: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.ChannelBalance}
 */
proto.boltzrpc.ChannelBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.ChannelBalance;
  return proto.boltzrpc.ChannelBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.ChannelBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.ChannelBalance}
 */
proto.boltzrpc.ChannelBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLocalBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemoteBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.ChannelBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.ChannelBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.ChannelBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ChannelBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalBalance();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRemoteBalance();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 local_balance = 1;
 * @return {number}
 */
proto.boltzrpc.ChannelBalance.prototype.getLocalBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.boltzrpc.ChannelBalance.prototype.setLocalBalance = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 remote_balance = 2;
 * @return {number}
 */
proto.boltzrpc.ChannelBalance.prototype.getRemoteBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.ChannelBalance.prototype.setRemoteBalance = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.NewAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.NewAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.NewAddressRequest.displayName = 'proto.boltzrpc.NewAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.NewAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.NewAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.NewAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.NewAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.NewAddressRequest}
 */
proto.boltzrpc.NewAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.NewAddressRequest;
  return proto.boltzrpc.NewAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.NewAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.NewAddressRequest}
 */
proto.boltzrpc.NewAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {!proto.boltzrpc.OutputType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.NewAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.NewAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.NewAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.NewAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.NewAddressRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.NewAddressRequest.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OutputType type = 2;
 * @return {!proto.boltzrpc.OutputType}
 */
proto.boltzrpc.NewAddressRequest.prototype.getType = function() {
  return /** @type {!proto.boltzrpc.OutputType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.boltzrpc.OutputType} value */
proto.boltzrpc.NewAddressRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.NewAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.NewAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.NewAddressResponse.displayName = 'proto.boltzrpc.NewAddressResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.NewAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.NewAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.NewAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.NewAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.NewAddressResponse}
 */
proto.boltzrpc.NewAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.NewAddressResponse;
  return proto.boltzrpc.NewAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.NewAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.NewAddressResponse}
 */
proto.boltzrpc.NewAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.NewAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.NewAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.NewAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.NewAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.boltzrpc.NewAddressResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.NewAddressResponse.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetTransactionRequest.displayName = 'proto.boltzrpc.GetTransactionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionHash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetTransactionRequest}
 */
proto.boltzrpc.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetTransactionRequest;
  return proto.boltzrpc.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetTransactionRequest}
 */
proto.boltzrpc.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.GetTransactionRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.GetTransactionRequest.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_hash = 2;
 * @return {string}
 */
proto.boltzrpc.GetTransactionRequest.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.GetTransactionRequest.prototype.setTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetTransactionResponse.displayName = 'proto.boltzrpc.GetTransactionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionHex: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetTransactionResponse}
 */
proto.boltzrpc.GetTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetTransactionResponse;
  return proto.boltzrpc.GetTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetTransactionResponse}
 */
proto.boltzrpc.GetTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionHex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transaction_hex = 1;
 * @return {string}
 */
proto.boltzrpc.GetTransactionResponse.prototype.getTransactionHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.GetTransactionResponse.prototype.setTransactionHex = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetFeeEstimationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetFeeEstimationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetFeeEstimationRequest.displayName = 'proto.boltzrpc.GetFeeEstimationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetFeeEstimationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetFeeEstimationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetFeeEstimationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetFeeEstimationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocks: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetFeeEstimationRequest}
 */
proto.boltzrpc.GetFeeEstimationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetFeeEstimationRequest;
  return proto.boltzrpc.GetFeeEstimationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetFeeEstimationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetFeeEstimationRequest}
 */
proto.boltzrpc.GetFeeEstimationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetFeeEstimationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetFeeEstimationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetFeeEstimationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetFeeEstimationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocks();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.GetFeeEstimationRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.GetFeeEstimationRequest.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 blocks = 2;
 * @return {number}
 */
proto.boltzrpc.GetFeeEstimationRequest.prototype.getBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.GetFeeEstimationRequest.prototype.setBlocks = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.GetFeeEstimationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.GetFeeEstimationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.GetFeeEstimationResponse.displayName = 'proto.boltzrpc.GetFeeEstimationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.GetFeeEstimationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.GetFeeEstimationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.GetFeeEstimationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetFeeEstimationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    feesMap: (f = msg.getFeesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.GetFeeEstimationResponse}
 */
proto.boltzrpc.GetFeeEstimationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.GetFeeEstimationResponse;
  return proto.boltzrpc.GetFeeEstimationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.GetFeeEstimationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.GetFeeEstimationResponse}
 */
proto.boltzrpc.GetFeeEstimationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFeesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.GetFeeEstimationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.GetFeeEstimationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.GetFeeEstimationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.GetFeeEstimationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * map<string, uint32> fees = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.boltzrpc.GetFeeEstimationResponse.prototype.getFeesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.boltzrpc.GetFeeEstimationResponse.prototype.clearFeesMap = function() {
  this.getFeesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.BroadcastTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.BroadcastTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.BroadcastTransactionRequest.displayName = 'proto.boltzrpc.BroadcastTransactionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.BroadcastTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.BroadcastTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.BroadcastTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.BroadcastTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionHex: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.BroadcastTransactionRequest}
 */
proto.boltzrpc.BroadcastTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.BroadcastTransactionRequest;
  return proto.boltzrpc.BroadcastTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.BroadcastTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.BroadcastTransactionRequest}
 */
proto.boltzrpc.BroadcastTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.BroadcastTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.BroadcastTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.BroadcastTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.BroadcastTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionHex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.BroadcastTransactionRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.BroadcastTransactionRequest.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_hex = 2;
 * @return {string}
 */
proto.boltzrpc.BroadcastTransactionRequest.prototype.getTransactionHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.BroadcastTransactionRequest.prototype.setTransactionHex = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.BroadcastTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.BroadcastTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.BroadcastTransactionResponse.displayName = 'proto.boltzrpc.BroadcastTransactionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.BroadcastTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.BroadcastTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.BroadcastTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.BroadcastTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionHash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.BroadcastTransactionResponse}
 */
proto.boltzrpc.BroadcastTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.BroadcastTransactionResponse;
  return proto.boltzrpc.BroadcastTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.BroadcastTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.BroadcastTransactionResponse}
 */
proto.boltzrpc.BroadcastTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.BroadcastTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.BroadcastTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.BroadcastTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.BroadcastTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transaction_hash = 1;
 * @return {string}
 */
proto.boltzrpc.BroadcastTransactionResponse.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.BroadcastTransactionResponse.prototype.setTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.ListenOnAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.ListenOnAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.ListenOnAddressRequest.displayName = 'proto.boltzrpc.ListenOnAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.ListenOnAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.ListenOnAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.ListenOnAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ListenOnAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.ListenOnAddressRequest}
 */
proto.boltzrpc.ListenOnAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.ListenOnAddressRequest;
  return proto.boltzrpc.ListenOnAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.ListenOnAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.ListenOnAddressRequest}
 */
proto.boltzrpc.ListenOnAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.ListenOnAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.ListenOnAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.ListenOnAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ListenOnAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.ListenOnAddressRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.ListenOnAddressRequest.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.boltzrpc.ListenOnAddressRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.ListenOnAddressRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.ListenOnAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.ListenOnAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.ListenOnAddressResponse.displayName = 'proto.boltzrpc.ListenOnAddressResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.ListenOnAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.ListenOnAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.ListenOnAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ListenOnAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.ListenOnAddressResponse}
 */
proto.boltzrpc.ListenOnAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.ListenOnAddressResponse;
  return proto.boltzrpc.ListenOnAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.ListenOnAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.ListenOnAddressResponse}
 */
proto.boltzrpc.ListenOnAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.ListenOnAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.ListenOnAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.ListenOnAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ListenOnAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SubscribeTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.SubscribeTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SubscribeTransactionsRequest.displayName = 'proto.boltzrpc.SubscribeTransactionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SubscribeTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SubscribeTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SubscribeTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SubscribeTransactionsRequest}
 */
proto.boltzrpc.SubscribeTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SubscribeTransactionsRequest;
  return proto.boltzrpc.SubscribeTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SubscribeTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SubscribeTransactionsRequest}
 */
proto.boltzrpc.SubscribeTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SubscribeTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SubscribeTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SubscribeTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SubscribeTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.SubscribeTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SubscribeTransactionsResponse.displayName = 'proto.boltzrpc.SubscribeTransactionsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SubscribeTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SubscribeTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amountReceived: jspb.Message.getFieldWithDefault(msg, 3, 0),
    confirmed: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SubscribeTransactionsResponse}
 */
proto.boltzrpc.SubscribeTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SubscribeTransactionsResponse;
  return proto.boltzrpc.SubscribeTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SubscribeTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SubscribeTransactionsResponse}
 */
proto.boltzrpc.SubscribeTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountReceived(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConfirmed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SubscribeTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SubscribeTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmountReceived();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getConfirmed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string output_address = 1;
 * @return {string}
 */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.getOutputAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.setOutputAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_hash = 2;
 * @return {string}
 */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.setTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 amount_received = 3;
 * @return {number}
 */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.getAmountReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.setAmountReceived = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool confirmed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.getConfirmed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.boltzrpc.SubscribeTransactionsResponse.prototype.setConfirmed = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SubscribeInvoicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.SubscribeInvoicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SubscribeInvoicesRequest.displayName = 'proto.boltzrpc.SubscribeInvoicesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SubscribeInvoicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SubscribeInvoicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SubscribeInvoicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeInvoicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SubscribeInvoicesRequest}
 */
proto.boltzrpc.SubscribeInvoicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SubscribeInvoicesRequest;
  return proto.boltzrpc.SubscribeInvoicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SubscribeInvoicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SubscribeInvoicesRequest}
 */
proto.boltzrpc.SubscribeInvoicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SubscribeInvoicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SubscribeInvoicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SubscribeInvoicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeInvoicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SubscribeInvoicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.boltzrpc.SubscribeInvoicesResponse.oneofGroups_);
};
goog.inherits(proto.boltzrpc.SubscribeInvoicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SubscribeInvoicesResponse.displayName = 'proto.boltzrpc.SubscribeInvoicesResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.boltzrpc.SubscribeInvoicesResponse.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.boltzrpc.SubscribeInvoicesResponse.EventDetailsCase = {
  EVENT_DETAILS_NOT_SET: 0,
  PREIMAGE: 3,
  ROUTING_FEE: 4
};

/**
 * @return {proto.boltzrpc.SubscribeInvoicesResponse.EventDetailsCase}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.getEventDetailsCase = function() {
  return /** @type {proto.boltzrpc.SubscribeInvoicesResponse.EventDetailsCase} */(jspb.Message.computeOneofCase(this, proto.boltzrpc.SubscribeInvoicesResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SubscribeInvoicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SubscribeInvoicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeInvoicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, 0),
    invoice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    preimage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    routingFee: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SubscribeInvoicesResponse}
 */
proto.boltzrpc.SubscribeInvoicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SubscribeInvoicesResponse;
  return proto.boltzrpc.SubscribeInvoicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SubscribeInvoicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SubscribeInvoicesResponse}
 */
proto.boltzrpc.SubscribeInvoicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.boltzrpc.InvoiceEvent} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreimage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoutingFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SubscribeInvoicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SubscribeInvoicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeInvoicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInvoice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional InvoiceEvent event = 1;
 * @return {!proto.boltzrpc.InvoiceEvent}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.getEvent = function() {
  return /** @type {!proto.boltzrpc.InvoiceEvent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.boltzrpc.InvoiceEvent} value */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.setEvent = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string invoice = 2;
 * @return {string}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.getInvoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.setInvoice = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string preimage = 3;
 * @return {string}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.getPreimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.setPreimage = function(value) {
  jspb.Message.setOneofField(this, 3, proto.boltzrpc.SubscribeInvoicesResponse.oneofGroups_[0], value);
};


proto.boltzrpc.SubscribeInvoicesResponse.prototype.clearPreimage = function() {
  jspb.Message.setOneofField(this, 3, proto.boltzrpc.SubscribeInvoicesResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.hasPreimage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 routing_fee = 4;
 * @return {number}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.getRoutingFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.setRoutingFee = function(value) {
  jspb.Message.setOneofField(this, 4, proto.boltzrpc.SubscribeInvoicesResponse.oneofGroups_[0], value);
};


proto.boltzrpc.SubscribeInvoicesResponse.prototype.clearRoutingFee = function() {
  jspb.Message.setOneofField(this, 4, proto.boltzrpc.SubscribeInvoicesResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.SubscribeInvoicesResponse.prototype.hasRoutingFee = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SubscribeSwapEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.SubscribeSwapEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SubscribeSwapEventsRequest.displayName = 'proto.boltzrpc.SubscribeSwapEventsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SubscribeSwapEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SubscribeSwapEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SubscribeSwapEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeSwapEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SubscribeSwapEventsRequest}
 */
proto.boltzrpc.SubscribeSwapEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SubscribeSwapEventsRequest;
  return proto.boltzrpc.SubscribeSwapEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SubscribeSwapEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SubscribeSwapEventsRequest}
 */
proto.boltzrpc.SubscribeSwapEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SubscribeSwapEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SubscribeSwapEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SubscribeSwapEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeSwapEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SubscribeSwapEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.boltzrpc.SubscribeSwapEventsResponse.oneofGroups_);
};
goog.inherits(proto.boltzrpc.SubscribeSwapEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SubscribeSwapEventsResponse.displayName = 'proto.boltzrpc.SubscribeSwapEventsResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.boltzrpc.SubscribeSwapEventsResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.EventDetailsCase = {
  EVENT_DETAILS_NOT_SET: 0,
  CLAIM_DETAILS: 2,
  ABORT_DETAILS: 3,
  REFUND_DETAILS: 4,
  ZERO_CONF_REJECTED_DETAILS: 5
};

/**
 * @return {proto.boltzrpc.SubscribeSwapEventsResponse.EventDetailsCase}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.getEventDetailsCase = function() {
  return /** @type {proto.boltzrpc.SubscribeSwapEventsResponse.EventDetailsCase} */(jspb.Message.computeOneofCase(this, proto.boltzrpc.SubscribeSwapEventsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SubscribeSwapEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SubscribeSwapEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeSwapEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, 0),
    claimDetails: (f = msg.getClaimDetails()) && proto.boltzrpc.ClaimDetails.toObject(includeInstance, f),
    abortDetails: (f = msg.getAbortDetails()) && proto.boltzrpc.AbortDetails.toObject(includeInstance, f),
    refundDetails: (f = msg.getRefundDetails()) && proto.boltzrpc.RefundDetails.toObject(includeInstance, f),
    zeroConfRejectedDetails: (f = msg.getZeroConfRejectedDetails()) && proto.boltzrpc.ZeroConfRejectedDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SubscribeSwapEventsResponse}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SubscribeSwapEventsResponse;
  return proto.boltzrpc.SubscribeSwapEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SubscribeSwapEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SubscribeSwapEventsResponse}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.boltzrpc.SwapEvent} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    case 2:
      var value = new proto.boltzrpc.ClaimDetails;
      reader.readMessage(value,proto.boltzrpc.ClaimDetails.deserializeBinaryFromReader);
      msg.setClaimDetails(value);
      break;
    case 3:
      var value = new proto.boltzrpc.AbortDetails;
      reader.readMessage(value,proto.boltzrpc.AbortDetails.deserializeBinaryFromReader);
      msg.setAbortDetails(value);
      break;
    case 4:
      var value = new proto.boltzrpc.RefundDetails;
      reader.readMessage(value,proto.boltzrpc.RefundDetails.deserializeBinaryFromReader);
      msg.setRefundDetails(value);
      break;
    case 5:
      var value = new proto.boltzrpc.ZeroConfRejectedDetails;
      reader.readMessage(value,proto.boltzrpc.ZeroConfRejectedDetails.deserializeBinaryFromReader);
      msg.setZeroConfRejectedDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SubscribeSwapEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SubscribeSwapEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeSwapEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getClaimDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.boltzrpc.ClaimDetails.serializeBinaryToWriter
    );
  }
  f = message.getAbortDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.boltzrpc.AbortDetails.serializeBinaryToWriter
    );
  }
  f = message.getRefundDetails();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.boltzrpc.RefundDetails.serializeBinaryToWriter
    );
  }
  f = message.getZeroConfRejectedDetails();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.boltzrpc.ZeroConfRejectedDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional SwapEvent event = 1;
 * @return {!proto.boltzrpc.SwapEvent}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.getEvent = function() {
  return /** @type {!proto.boltzrpc.SwapEvent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.boltzrpc.SwapEvent} value */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.setEvent = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ClaimDetails claim_details = 2;
 * @return {?proto.boltzrpc.ClaimDetails}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.getClaimDetails = function() {
  return /** @type{?proto.boltzrpc.ClaimDetails} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.ClaimDetails, 2));
};


/** @param {?proto.boltzrpc.ClaimDetails|undefined} value */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.setClaimDetails = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.boltzrpc.SubscribeSwapEventsResponse.oneofGroups_[0], value);
};


proto.boltzrpc.SubscribeSwapEventsResponse.prototype.clearClaimDetails = function() {
  this.setClaimDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.hasClaimDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AbortDetails abort_details = 3;
 * @return {?proto.boltzrpc.AbortDetails}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.getAbortDetails = function() {
  return /** @type{?proto.boltzrpc.AbortDetails} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.AbortDetails, 3));
};


/** @param {?proto.boltzrpc.AbortDetails|undefined} value */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.setAbortDetails = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.boltzrpc.SubscribeSwapEventsResponse.oneofGroups_[0], value);
};


proto.boltzrpc.SubscribeSwapEventsResponse.prototype.clearAbortDetails = function() {
  this.setAbortDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.hasAbortDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RefundDetails refund_details = 4;
 * @return {?proto.boltzrpc.RefundDetails}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.getRefundDetails = function() {
  return /** @type{?proto.boltzrpc.RefundDetails} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.RefundDetails, 4));
};


/** @param {?proto.boltzrpc.RefundDetails|undefined} value */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.setRefundDetails = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.boltzrpc.SubscribeSwapEventsResponse.oneofGroups_[0], value);
};


proto.boltzrpc.SubscribeSwapEventsResponse.prototype.clearRefundDetails = function() {
  this.setRefundDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.hasRefundDetails = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ZeroConfRejectedDetails zero_conf_rejected_details = 5;
 * @return {?proto.boltzrpc.ZeroConfRejectedDetails}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.getZeroConfRejectedDetails = function() {
  return /** @type{?proto.boltzrpc.ZeroConfRejectedDetails} */ (
    jspb.Message.getWrapperField(this, proto.boltzrpc.ZeroConfRejectedDetails, 5));
};


/** @param {?proto.boltzrpc.ZeroConfRejectedDetails|undefined} value */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.setZeroConfRejectedDetails = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.boltzrpc.SubscribeSwapEventsResponse.oneofGroups_[0], value);
};


proto.boltzrpc.SubscribeSwapEventsResponse.prototype.clearZeroConfRejectedDetails = function() {
  this.setZeroConfRejectedDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.boltzrpc.SubscribeSwapEventsResponse.prototype.hasZeroConfRejectedDetails = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.ClaimDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.ClaimDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.ClaimDetails.displayName = 'proto.boltzrpc.ClaimDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.ClaimDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.ClaimDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.ClaimDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ClaimDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    lockupTransactionHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lockupVout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minerFee: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.ClaimDetails}
 */
proto.boltzrpc.ClaimDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.ClaimDetails;
  return proto.boltzrpc.ClaimDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.ClaimDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.ClaimDetails}
 */
proto.boltzrpc.ClaimDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockupTransactionHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockupVout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinerFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.ClaimDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.ClaimDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.ClaimDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ClaimDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockupTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLockupVout();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMinerFee();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string lockup_transaction_hash = 1;
 * @return {string}
 */
proto.boltzrpc.ClaimDetails.prototype.getLockupTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.ClaimDetails.prototype.setLockupTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 lockup_vout = 2;
 * @return {number}
 */
proto.boltzrpc.ClaimDetails.prototype.getLockupVout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.ClaimDetails.prototype.setLockupVout = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 miner_fee = 3;
 * @return {number}
 */
proto.boltzrpc.ClaimDetails.prototype.getMinerFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.ClaimDetails.prototype.setMinerFee = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.AbortDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.AbortDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.AbortDetails.displayName = 'proto.boltzrpc.AbortDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.AbortDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.AbortDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.AbortDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.AbortDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoice: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.AbortDetails}
 */
proto.boltzrpc.AbortDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.AbortDetails;
  return proto.boltzrpc.AbortDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.AbortDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.AbortDetails}
 */
proto.boltzrpc.AbortDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.AbortDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.AbortDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.AbortDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.AbortDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string invoice = 1;
 * @return {string}
 */
proto.boltzrpc.AbortDetails.prototype.getInvoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.AbortDetails.prototype.setInvoice = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.RefundDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.RefundDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.RefundDetails.displayName = 'proto.boltzrpc.RefundDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.RefundDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.RefundDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.RefundDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.RefundDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    lockupTransactionHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lockupVout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minerFee: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.RefundDetails}
 */
proto.boltzrpc.RefundDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.RefundDetails;
  return proto.boltzrpc.RefundDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.RefundDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.RefundDetails}
 */
proto.boltzrpc.RefundDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockupTransactionHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockupVout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinerFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.RefundDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.RefundDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.RefundDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.RefundDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockupTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLockupVout();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMinerFee();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string lockup_transaction_hash = 1;
 * @return {string}
 */
proto.boltzrpc.RefundDetails.prototype.getLockupTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.RefundDetails.prototype.setLockupTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 lockup_vout = 2;
 * @return {number}
 */
proto.boltzrpc.RefundDetails.prototype.getLockupVout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.RefundDetails.prototype.setLockupVout = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 miner_fee = 3;
 * @return {number}
 */
proto.boltzrpc.RefundDetails.prototype.getMinerFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.RefundDetails.prototype.setMinerFee = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.ZeroConfRejectedDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.ZeroConfRejectedDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.ZeroConfRejectedDetails.displayName = 'proto.boltzrpc.ZeroConfRejectedDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.ZeroConfRejectedDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.ZeroConfRejectedDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.ZeroConfRejectedDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ZeroConfRejectedDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoice: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.ZeroConfRejectedDetails}
 */
proto.boltzrpc.ZeroConfRejectedDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.ZeroConfRejectedDetails;
  return proto.boltzrpc.ZeroConfRejectedDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.ZeroConfRejectedDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.ZeroConfRejectedDetails}
 */
proto.boltzrpc.ZeroConfRejectedDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.ZeroConfRejectedDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.ZeroConfRejectedDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.ZeroConfRejectedDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ZeroConfRejectedDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string invoice = 1;
 * @return {string}
 */
proto.boltzrpc.ZeroConfRejectedDetails.prototype.getInvoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.ZeroConfRejectedDetails.prototype.setInvoice = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.boltzrpc.ZeroConfRejectedDetails.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.ZeroConfRejectedDetails.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.CreateSwapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.CreateSwapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.CreateSwapRequest.displayName = 'proto.boltzrpc.CreateSwapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.CreateSwapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.CreateSwapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.CreateSwapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateSwapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseCurrency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quoteCurrency: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderSide: jspb.Message.getFieldWithDefault(msg, 3, 0),
    invoice: jspb.Message.getFieldWithDefault(msg, 4, ""),
    expectedAmount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    refundPublicKey: jspb.Message.getFieldWithDefault(msg, 6, ""),
    outputType: jspb.Message.getFieldWithDefault(msg, 7, 0),
    timeoutBlockDelta: jspb.Message.getFieldWithDefault(msg, 8, 0),
    acceptZeroConf: jspb.Message.getFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.CreateSwapRequest}
 */
proto.boltzrpc.CreateSwapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.CreateSwapRequest;
  return proto.boltzrpc.CreateSwapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.CreateSwapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.CreateSwapRequest}
 */
proto.boltzrpc.CreateSwapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteCurrency(value);
      break;
    case 3:
      var value = /** @type {!proto.boltzrpc.OrderSide} */ (reader.readEnum());
      msg.setOrderSide(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpectedAmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefundPublicKey(value);
      break;
    case 7:
      var value = /** @type {!proto.boltzrpc.OutputType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutBlockDelta(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcceptZeroConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.CreateSwapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.CreateSwapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.CreateSwapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateSwapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuoteCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInvoice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExpectedAmount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getRefundPublicKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOutputType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTimeoutBlockDelta();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getAcceptZeroConf();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional string base_currency = 1;
 * @return {string}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getBaseCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateSwapRequest.prototype.setBaseCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quote_currency = 2;
 * @return {string}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getQuoteCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateSwapRequest.prototype.setQuoteCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional OrderSide order_side = 3;
 * @return {!proto.boltzrpc.OrderSide}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getOrderSide = function() {
  return /** @type {!proto.boltzrpc.OrderSide} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.boltzrpc.OrderSide} value */
proto.boltzrpc.CreateSwapRequest.prototype.setOrderSide = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string invoice = 4;
 * @return {string}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getInvoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateSwapRequest.prototype.setInvoice = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 expected_amount = 5;
 * @return {number}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getExpectedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.boltzrpc.CreateSwapRequest.prototype.setExpectedAmount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string refund_public_key = 6;
 * @return {string}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getRefundPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateSwapRequest.prototype.setRefundPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional OutputType output_type = 7;
 * @return {!proto.boltzrpc.OutputType}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getOutputType = function() {
  return /** @type {!proto.boltzrpc.OutputType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.boltzrpc.OutputType} value */
proto.boltzrpc.CreateSwapRequest.prototype.setOutputType = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional uint64 timeout_block_delta = 8;
 * @return {number}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getTimeoutBlockDelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.boltzrpc.CreateSwapRequest.prototype.setTimeoutBlockDelta = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool accept_zero_conf = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.boltzrpc.CreateSwapRequest.prototype.getAcceptZeroConf = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.boltzrpc.CreateSwapRequest.prototype.setAcceptZeroConf = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.CreateSwapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.CreateSwapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.CreateSwapResponse.displayName = 'proto.boltzrpc.CreateSwapResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.CreateSwapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.CreateSwapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.CreateSwapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateSwapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    redeemScript: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeoutBlockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    address: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.CreateSwapResponse}
 */
proto.boltzrpc.CreateSwapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.CreateSwapResponse;
  return proto.boltzrpc.CreateSwapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.CreateSwapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.CreateSwapResponse}
 */
proto.boltzrpc.CreateSwapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedeemScript(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutBlockHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.CreateSwapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.CreateSwapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.CreateSwapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateSwapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedeemScript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeoutBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string redeem_script = 1;
 * @return {string}
 */
proto.boltzrpc.CreateSwapResponse.prototype.getRedeemScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateSwapResponse.prototype.setRedeemScript = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 timeout_block_height = 2;
 * @return {number}
 */
proto.boltzrpc.CreateSwapResponse.prototype.getTimeoutBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.CreateSwapResponse.prototype.setTimeoutBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.boltzrpc.CreateSwapResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateSwapResponse.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.CreateReverseSwapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.CreateReverseSwapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.CreateReverseSwapRequest.displayName = 'proto.boltzrpc.CreateReverseSwapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.CreateReverseSwapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.CreateReverseSwapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateReverseSwapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseCurrency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quoteCurrency: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderSide: jspb.Message.getFieldWithDefault(msg, 3, 0),
    invoiceAmount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    onchainAmount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    claimPublicKey: jspb.Message.getFieldWithDefault(msg, 9, ""),
    timeoutBlockDelta: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.CreateReverseSwapRequest}
 */
proto.boltzrpc.CreateReverseSwapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.CreateReverseSwapRequest;
  return proto.boltzrpc.CreateReverseSwapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.CreateReverseSwapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.CreateReverseSwapRequest}
 */
proto.boltzrpc.CreateReverseSwapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteCurrency(value);
      break;
    case 3:
      var value = /** @type {!proto.boltzrpc.OrderSide} */ (reader.readEnum());
      msg.setOrderSide(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInvoiceAmount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOnchainAmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setClaimPublicKey(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutBlockDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.CreateReverseSwapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.CreateReverseSwapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateReverseSwapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuoteCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInvoiceAmount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getOnchainAmount();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getClaimPublicKey();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTimeoutBlockDelta();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional string base_currency = 1;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.getBaseCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapRequest.prototype.setBaseCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quote_currency = 2;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.getQuoteCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapRequest.prototype.setQuoteCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional OrderSide order_side = 3;
 * @return {!proto.boltzrpc.OrderSide}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.getOrderSide = function() {
  return /** @type {!proto.boltzrpc.OrderSide} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.boltzrpc.OrderSide} value */
proto.boltzrpc.CreateReverseSwapRequest.prototype.setOrderSide = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 invoice_amount = 7;
 * @return {number}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.getInvoiceAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.boltzrpc.CreateReverseSwapRequest.prototype.setInvoiceAmount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 onchain_amount = 8;
 * @return {number}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.getOnchainAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.boltzrpc.CreateReverseSwapRequest.prototype.setOnchainAmount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string claim_public_key = 9;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.getClaimPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapRequest.prototype.setClaimPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 timeout_block_delta = 10;
 * @return {number}
 */
proto.boltzrpc.CreateReverseSwapRequest.prototype.getTimeoutBlockDelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.boltzrpc.CreateReverseSwapRequest.prototype.setTimeoutBlockDelta = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.CreateReverseSwapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.CreateReverseSwapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.CreateReverseSwapResponse.displayName = 'proto.boltzrpc.CreateReverseSwapResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.CreateReverseSwapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.CreateReverseSwapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateReverseSwapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoice: jspb.Message.getFieldWithDefault(msg, 1, ""),
    redeemScript: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lockupAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lockupTransaction: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lockupTransactionHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    minerFee: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.CreateReverseSwapResponse}
 */
proto.boltzrpc.CreateReverseSwapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.CreateReverseSwapResponse;
  return proto.boltzrpc.CreateReverseSwapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.CreateReverseSwapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.CreateReverseSwapResponse}
 */
proto.boltzrpc.CreateReverseSwapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedeemScript(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockupAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockupTransaction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockupTransactionHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinerFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.CreateReverseSwapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.CreateReverseSwapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.CreateReverseSwapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRedeemScript();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLockupAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLockupTransaction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLockupTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMinerFee();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string invoice = 1;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.getInvoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapResponse.prototype.setInvoice = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string redeem_script = 2;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.getRedeemScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapResponse.prototype.setRedeemScript = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string lockup_address = 3;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.getLockupAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapResponse.prototype.setLockupAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string lockup_transaction = 4;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.getLockupTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapResponse.prototype.setLockupTransaction = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string lockup_transaction_hash = 5;
 * @return {string}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.getLockupTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.boltzrpc.CreateReverseSwapResponse.prototype.setLockupTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 miner_fee = 6;
 * @return {number}
 */
proto.boltzrpc.CreateReverseSwapResponse.prototype.getMinerFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.boltzrpc.CreateReverseSwapResponse.prototype.setMinerFee = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SendCoinsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.SendCoinsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SendCoinsRequest.displayName = 'proto.boltzrpc.SendCoinsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SendCoinsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SendCoinsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SendCoinsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SendCoinsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    satPerVbyte: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sendAll: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SendCoinsRequest}
 */
proto.boltzrpc.SendCoinsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SendCoinsRequest;
  return proto.boltzrpc.SendCoinsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SendCoinsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SendCoinsRequest}
 */
proto.boltzrpc.SendCoinsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSatPerVbyte(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SendCoinsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SendCoinsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SendCoinsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SendCoinsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSatPerVbyte();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSendAll();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.SendCoinsRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.SendCoinsRequest.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.boltzrpc.SendCoinsRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.SendCoinsRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.boltzrpc.SendCoinsRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.boltzrpc.SendCoinsRequest.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 sat_per_vbyte = 4;
 * @return {number}
 */
proto.boltzrpc.SendCoinsRequest.prototype.getSatPerVbyte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.boltzrpc.SendCoinsRequest.prototype.setSatPerVbyte = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool send_all = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.boltzrpc.SendCoinsRequest.prototype.getSendAll = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.boltzrpc.SendCoinsRequest.prototype.setSendAll = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SendCoinsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.SendCoinsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SendCoinsResponse.displayName = 'proto.boltzrpc.SendCoinsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SendCoinsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SendCoinsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SendCoinsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SendCoinsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vout: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SendCoinsResponse}
 */
proto.boltzrpc.SendCoinsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SendCoinsResponse;
  return proto.boltzrpc.SendCoinsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SendCoinsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SendCoinsResponse}
 */
proto.boltzrpc.SendCoinsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SendCoinsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SendCoinsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SendCoinsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SendCoinsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVout();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string transaction_hash = 1;
 * @return {string}
 */
proto.boltzrpc.SendCoinsResponse.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.SendCoinsResponse.prototype.setTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 vout = 2;
 * @return {number}
 */
proto.boltzrpc.SendCoinsResponse.prototype.getVout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.boltzrpc.SendCoinsResponse.prototype.setVout = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.SubscribeChannelBackupsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.SubscribeChannelBackupsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.SubscribeChannelBackupsRequest.displayName = 'proto.boltzrpc.SubscribeChannelBackupsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.SubscribeChannelBackupsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.SubscribeChannelBackupsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.SubscribeChannelBackupsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeChannelBackupsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.SubscribeChannelBackupsRequest}
 */
proto.boltzrpc.SubscribeChannelBackupsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.SubscribeChannelBackupsRequest;
  return proto.boltzrpc.SubscribeChannelBackupsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.SubscribeChannelBackupsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.SubscribeChannelBackupsRequest}
 */
proto.boltzrpc.SubscribeChannelBackupsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.SubscribeChannelBackupsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.SubscribeChannelBackupsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.SubscribeChannelBackupsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.SubscribeChannelBackupsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.boltzrpc.ChannelBackup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.boltzrpc.ChannelBackup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.boltzrpc.ChannelBackup.displayName = 'proto.boltzrpc.ChannelBackup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.boltzrpc.ChannelBackup.prototype.toObject = function(opt_includeInstance) {
  return proto.boltzrpc.ChannelBackup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.boltzrpc.ChannelBackup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ChannelBackup.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    multiChannelBackup: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.boltzrpc.ChannelBackup}
 */
proto.boltzrpc.ChannelBackup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.boltzrpc.ChannelBackup;
  return proto.boltzrpc.ChannelBackup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.boltzrpc.ChannelBackup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.boltzrpc.ChannelBackup}
 */
proto.boltzrpc.ChannelBackup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMultiChannelBackup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.boltzrpc.ChannelBackup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.boltzrpc.ChannelBackup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.boltzrpc.ChannelBackup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.boltzrpc.ChannelBackup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMultiChannelBackup();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.boltzrpc.ChannelBackup.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.boltzrpc.ChannelBackup.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string multi_channel_backup = 2;
 * @return {string}
 */
proto.boltzrpc.ChannelBackup.prototype.getMultiChannelBackup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.boltzrpc.ChannelBackup.prototype.setMultiChannelBackup = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.boltzrpc.OutputType = {
  BECH32: 0,
  COMPATIBILITY: 1,
  LEGACY: 2
};

/**
 * @enum {number}
 */
proto.boltzrpc.OrderSide = {
  BUY: 0,
  SELL: 1
};

/**
 * @enum {number}
 */
proto.boltzrpc.InvoiceEvent = {
  PAID: 0,
  FAILED_TO_PAY: 1,
  SETTLED: 2
};

/**
 * @enum {number}
 */
proto.boltzrpc.SwapEvent = {
  CLAIM: 0,
  ABORT: 1,
  ZEROCONF_REJECTED: 2,
  REFUND: 3
};

goog.object.extend(exports, proto.boltzrpc);
